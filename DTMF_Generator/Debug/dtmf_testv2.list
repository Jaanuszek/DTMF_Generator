
dtmf_testv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005990  08005990  00015990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb8  08005bb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  08005bcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005bcc  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012721  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a28  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc0  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002169e  00000000  00000000  00036f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001419e  00000000  00000000  0005859e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb031  00000000  00000000  0006c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047e4  00000000  00000000  00137770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013bf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005978 	.word	0x08005978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08005978 	.word	0x08005978

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2224      	movs	r2, #36	; 0x24
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fd40 	bl	800489a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_DAC1_Init+0x70>)
 8000e1c:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <MX_DAC1_Init+0x74>)
 8000e1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e20:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_DAC1_Init+0x70>)
 8000e22:	f001 f854 	bl	8001ece <HAL_DAC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e2c:	f000 fcaa 	bl	8001784 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <MX_DAC1_Init+0x70>)
 8000e4c:	f001 f937 	bl	80020be <HAL_DAC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 fc95 	bl	8001784 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_DAC1_Init+0x70>)
 8000e62:	f001 f92c 	bl	80020be <HAL_DAC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000e6c:	f000 fc8a 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000028 	.word	0x20000028
 8000e7c:	40007400 	.word	0x40007400

08000e80 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_DAC_MspInit+0x84>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12c      	bne.n	8000efc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_DAC_MspInit+0x88>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ed2:	2330      	movs	r3, #48	; 0x30
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fa1a 	bl	8002320 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2036      	movs	r0, #54	; 0x36
 8000ef2:	f000 ffb6 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef6:	2036      	movs	r0, #54	; 0x36
 8000ef8:	f000 ffcf 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40007400 	.word	0x40007400
 8000f08:	40021000 	.word	0x40021000

08000f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a37      	ldr	r2, [pc, #220]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a31      	ldr	r2, [pc, #196]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_GPIO_Init+0xf8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f640 4142 	movw	r1, #3138	; 0xc42
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fb56 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	4822      	ldr	r0, [pc, #136]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f7e:	f001 fb51 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA6 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11;
 8000f82:	f640 4342 	movw	r3, #3138	; 0xc42
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f001 f9bf 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fa2:	f44f 7362 	mov.w	r3, #904	; 0x388
 8000fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f001 f9b0 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000fd8:	f001 f9a2 	bl	8002320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2009      	movs	r0, #9
 8000fe2:	f000 ff3e 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fe6:	2009      	movs	r0, #9
 8000fe8:	f000 ff57 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2017      	movs	r0, #23
 8000ff2:	f000 ff36 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff6:	2017      	movs	r0, #23
 8000ff8:	f000 ff4f 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400
 800100c:	00000000 	.word	0x00000000

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(uint8_t j=0; j<64; j++){
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e03b      	b.n	8001094 <main+0x84>
//		buffer1[j]=((sin_amp+1)/2)*sin((2*M_PI*j)/64+1)+(sin_amp+1)/2;
	buffer1[j]=((sin(j*2*PI/64)+1)*(4096/2));
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa27 	bl	8000474 <__aeabi_i2d>
 8001026:	a33f      	add	r3, pc, #252	; (adr r3, 8001124 <main+0x114>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fa8c 	bl	8000548 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <main+0xf8>)
 800103e:	f7ff fbad 	bl	800079c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	ec43 2b17 	vmov	d7, r2, r3
 800104a:	eeb0 0a47 	vmov.f32	s0, s14
 800104e:	eef0 0a67 	vmov.f32	s1, s15
 8001052:	f003 fc51 	bl	80048f8 <sin>
 8001056:	ec51 0b10 	vmov	r0, r1, d0
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <main+0xfc>)
 8001060:	f7ff f8bc 	bl	80001dc <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <main+0x100>)
 8001072:	f7ff fa69 	bl	8000548 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	79fc      	ldrb	r4, [r7, #7]
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd24 	bl	8000acc <__aeabi_d2uiz>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <main+0x104>)
 800108a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t j=0; j<64; j++){
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b3f      	cmp	r3, #63	; 0x3f
 8001098:	d9c0      	bls.n	800101c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 fd6e 	bl	8001b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f845 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f7ff ff33 	bl	8000f0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010a6:	f000 fca5 	bl	80019f4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80010aa:	f7ff fead 	bl	8000e08 <MX_DAC1_Init>
  MX_TIM7_Init();
 80010ae:	f000 fc03 	bl	80018b8 <MX_TIM7_Init>
  MX_TIM16_Init();
 80010b2:	f000 fc37 	bl	8001924 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <main+0x108>)
 80010ba:	f000 ff2a 	bl	8001f12 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80010be:	2110      	movs	r1, #16
 80010c0:	4815      	ldr	r0, [pc, #84]	; (8001118 <main+0x108>)
 80010c2:	f000 ff26 	bl	8001f12 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <main+0x10c>)
 80010c8:	f002 fcf2 	bl	8003ab0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <main+0x110>)
 80010ce:	f002 fcef 	bl	8003ab0 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2102      	movs	r1, #2
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f001 faa3 	bl	8002624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fa9c 	bl	8002624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f001 fa95 	bl	8002624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f001 fa8f 	bl	8002624 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001106:	e7fe      	b.n	8001106 <main+0xf6>
 8001108:	40500000 	.word	0x40500000
 800110c:	3ff00000 	.word	0x3ff00000
 8001110:	40a00000 	.word	0x40a00000
 8001114:	20000064 	.word	0x20000064
 8001118:	20000028 	.word	0x20000028
 800111c:	20000130 	.word	0x20000130
 8001120:	200000e4 	.word	0x200000e4
 8001124:	4d12d84a 	.word	0x4d12d84a
 8001128:	400921fb 	.word	0x400921fb

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	; 0x58
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2244      	movs	r2, #68	; 0x44
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fbad 	bl	800489a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001152:	f001 facf 	bl	80026f4 <HAL_PWREx_ControlVoltageScaling>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800115c:	f000 fb12 	bl	8001784 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001160:	f001 faaa 	bl	80026b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <SystemClock_Config+0xc0>)
 8001166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <SystemClock_Config+0xc0>)
 800116c:	f023 0318 	bic.w	r3, r3, #24
 8001170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001174:	2314      	movs	r3, #20
 8001176:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800118c:	2301      	movs	r3, #1
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001194:	2328      	movs	r3, #40	; 0x28
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001198:	2307      	movs	r3, #7
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 faf9 	bl	80027a0 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b4:	f000 fae6 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2303      	movs	r3, #3
 80011be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fef9 	bl	8002fc8 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011dc:	f000 fad2 	bl	8001784 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011e0:	f002 fb0c 	bl	80037fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80011e4:	bf00      	nop
 80011e6:	3758      	adds	r7, #88	; 0x58
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]


	  if(htim->Instance==TIM16){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d116      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x40>
//		  if(irq_flag){
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, buffer1[l]);
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800120c:	b29b      	uxth	r3, r3
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001214:	f000 ff24 	bl	8002060 <HAL_DAC_SetValue>
			  l++;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001220:	6013      	str	r3, [r2, #0]
			  if(l>=64) l=0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b3f      	cmp	r3, #63	; 0x3f
 8001228:	d902      	bls.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x40>
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
	//		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//		  }
	  }
	  if(htim->Instance==TIM7){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d116      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x78>
//		  if(irq_flag){
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, buffer1[i]);
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001244:	b29b      	uxth	r3, r3
 8001246:	2200      	movs	r2, #0
 8001248:	2110      	movs	r1, #16
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800124c:	f000 ff08 	bl	8002060 <HAL_DAC_SetValue>
			  i++;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001258:	6013      	str	r3, [r2, #0]
			  if(i>=64) i=0;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b3f      	cmp	r3, #63	; 0x3f
 8001260:	d902      	bls.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
//		  }
	  }
//	  irq_flag=false;
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40014400 	.word	0x40014400
 8001274:	20000060 	.word	0x20000060
 8001278:	20000064 	.word	0x20000064
 800127c:	20000028 	.word	0x20000028
 8001280:	40001400 	.word	0x40001400
 8001284:	2000005c 	.word	0x2000005c

08001288 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  irq_flag = true;
 8001292:	4bb0      	ldr	r3, [pc, #704]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 8001298:	f000 fcd8 	bl	8001c4c <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4aae      	ldr	r2, [pc, #696]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80012a0:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 80012a2:	4bad      	ldr	r3, [pc, #692]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4bad      	ldr	r3, [pc, #692]	; (800155c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	f240 8258 	bls.w	8001762 <HAL_GPIO_EXTI_Callback+0x4da>

    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012b2:	4bab      	ldr	r3, [pc, #684]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012b4:	f44f 7262 	mov.w	r2, #904	; 0x388
 80012b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80012ba:	4ba9      	ldr	r3, [pc, #676]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80012c0:	4ba7      	ldr	r3, [pc, #668]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80012cc:	49a4      	ldr	r1, [pc, #656]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f001 f825 	bl	8002320 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2102      	movs	r1, #2
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f001 f9a1 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f001 f99a 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f001 f993 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2140      	movs	r1, #64	; 0x40
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f001 f98d 	bl	8002624 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d116      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0xb6>
 8001310:	2108      	movs	r1, #8
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f001 f96d 	bl	80025f4 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00e      	beq.n	800133e <HAL_GPIO_EXTI_Callback+0xb6>
    {

    	TIM16->ARR = 1792;
 8001320:	4b90      	ldr	r3, [pc, #576]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001322:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 8001328:	bf00      	nop
    	TIM7->ARR = 1033;
 800132a:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800132c:	f240 4209 	movw	r2, #1033	; 0x409
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 8001332:	2201      	movs	r2, #1
 8001334:	2108      	movs	r1, #8
 8001336:	488d      	ldr	r0, [pc, #564]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001338:	f001 f974 	bl	8002624 <HAL_GPIO_WritePin>
 800133c:	e056      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x164>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b80      	cmp	r3, #128	; 0x80
 8001342:	d116      	bne.n	8001372 <HAL_GPIO_EXTI_Callback+0xea>
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 f953 	bl	80025f4 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00e      	beq.n	8001372 <HAL_GPIO_EXTI_Callback+0xea>
    {

    	TIM16->ARR = 1792;
 8001354:	4b83      	ldr	r3, [pc, #524]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 800135c:	bf00      	nop
    	TIM7->ARR = 936;
 800135e:	4b82      	ldr	r3, [pc, #520]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001360:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 8001366:	2201      	movs	r2, #1
 8001368:	2108      	movs	r1, #8
 800136a:	4880      	ldr	r0, [pc, #512]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800136c:	f001 f95a 	bl	8002624 <HAL_GPIO_WritePin>
 8001370:	e03c      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x164>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001378:	d117      	bne.n	80013aa <HAL_GPIO_EXTI_Callback+0x122>
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 f937 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00e      	beq.n	80013aa <HAL_GPIO_EXTI_Callback+0x122>
    {

    	TIM16->ARR = 1792;
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800138e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 8001394:	bf00      	nop
    	TIM7->ARR = 845;
 8001396:	4b74      	ldr	r3, [pc, #464]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001398:	f240 324d 	movw	r2, #845	; 0x34d
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 800139e:	2201      	movs	r2, #1
 80013a0:	2108      	movs	r1, #8
 80013a2:	4872      	ldr	r0, [pc, #456]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80013a4:	f001 f93e 	bl	8002624 <HAL_GPIO_WritePin>
 80013a8:	e020      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x164>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b0:	d117      	bne.n	80013e2 <HAL_GPIO_EXTI_Callback+0x15a>
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 f91b 	bl	80025f4 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <HAL_GPIO_EXTI_Callback+0x15a>
    {

    	TIM16->ARR = 1792;
 80013c4:	4b67      	ldr	r3, [pc, #412]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80013c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80013cc:	bf00      	nop
    	TIM7->ARR = 764;
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013d0:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2108      	movs	r1, #8
 80013da:	4864      	ldr	r0, [pc, #400]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80013dc:	f001 f922 	bl	8002624 <HAL_GPIO_WritePin>
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x164>
    }
    else{
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4861      	ldr	r0, [pc, #388]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80013e8:	f001 f91c 	bl	8002624 <HAL_GPIO_WritePin>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f001 f916 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f001 f90f 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f001 f908 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f001 f902 	bl	8002624 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d115      	bne.n	8001452 <HAL_GPIO_EXTI_Callback+0x1ca>
 8001426:	2108      	movs	r1, #8
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f001 f8e2 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_EXTI_Callback+0x1ca>
    {

    	TIM16->ARR = 1623;
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001438:	f240 6257 	movw	r2, #1623	; 0x657
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 800143e:	bf00      	nop
    	TIM7->ARR = 1034;
 8001440:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001442:	f240 420a 	movw	r2, #1034	; 0x40a
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001448:	2108      	movs	r1, #8
 800144a:	4848      	ldr	r0, [pc, #288]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800144c:	f001 f902 	bl	8002654 <HAL_GPIO_TogglePin>
 8001450:	e04d      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x266>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b80      	cmp	r3, #128	; 0x80
 8001456:	d115      	bne.n	8001484 <HAL_GPIO_EXTI_Callback+0x1fc>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f001 f8c9 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_EXTI_Callback+0x1fc>
    {

    	TIM16->ARR = 1623;
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800146a:	f240 6257 	movw	r2, #1623	; 0x657
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 8001470:	bf00      	nop
    	TIM7->ARR = 937;
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001474:	f240 32a9 	movw	r2, #937	; 0x3a9
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800147a:	2108      	movs	r1, #8
 800147c:	483b      	ldr	r0, [pc, #236]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800147e:	f001 f8e9 	bl	8002654 <HAL_GPIO_TogglePin>
 8001482:	e034      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x266>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148a:	d116      	bne.n	80014ba <HAL_GPIO_EXTI_Callback+0x232>
 800148c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f001 f8ae 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_EXTI_Callback+0x232>
    {

    	TIM16->ARR = 1623;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014a0:	f240 6257 	movw	r2, #1623	; 0x657
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80014a6:	bf00      	nop
    	TIM7->ARR = 846;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80014aa:	f240 324e 	movw	r2, #846	; 0x34e
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014b0:	2108      	movs	r1, #8
 80014b2:	482e      	ldr	r0, [pc, #184]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80014b4:	f001 f8ce 	bl	8002654 <HAL_GPIO_TogglePin>
 80014b8:	e019      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x266>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c0:	d115      	bne.n	80014ee <HAL_GPIO_EXTI_Callback+0x266>
 80014c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 f893 	bl	80025f4 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_GPIO_EXTI_Callback+0x266>
    {

    	TIM16->ARR = 1623;
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014d6:	f240 6257 	movw	r2, #1623	; 0x657
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80014dc:	bf00      	nop
    	TIM7->ARR = 765;
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80014e0:	f240 22fd 	movw	r2, #765	; 0x2fd
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014e6:	2108      	movs	r1, #8
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80014ea:	f001 f8b3 	bl	8002654 <HAL_GPIO_TogglePin>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2102      	movs	r1, #2
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f001 f895 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 f88e 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f001 f887 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 f881 	bl	8002624 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d123      	bne.n	8001570 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001528:	2108      	movs	r1, #8
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 f861 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <HAL_GPIO_EXTI_Callback+0x2e8>
    {

//    	__NOP();= 48; //ASCII value of 0
    	TIM16->ARR = 1467;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800153a:	f240 52bb 	movw	r2, #1467	; 0x5bb
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 8001540:	bf00      	nop
    	TIM7->ARR = 1034;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001544:	f240 420a 	movw	r2, #1034	; 0x40a
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800154a:	2108      	movs	r1, #8
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800154e:	f001 f881 	bl	8002654 <HAL_GPIO_TogglePin>
 8001552:	e05b      	b.n	800160c <HAL_GPIO_EXTI_Callback+0x384>
 8001554:	20000058 	.word	0x20000058
 8001558:	20000054 	.word	0x20000054
 800155c:	20000050 	.word	0x20000050
 8001560:	2000003c 	.word	0x2000003c
 8001564:	40014400 	.word	0x40014400
 8001568:	40001400 	.word	0x40001400
 800156c:	48000400 	.word	0x48000400
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	2b80      	cmp	r3, #128	; 0x80
 8001574:	d115      	bne.n	80015a2 <HAL_GPIO_EXTI_Callback+0x31a>
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f001 f83a 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_EXTI_Callback+0x31a>
    {

//    	TIM7->ARR = 938;
//    	__NOP();
    	TIM16->ARR =1467;
 8001586:	4b79      	ldr	r3, [pc, #484]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001588:	f240 52bb 	movw	r2, #1467	; 0x5bb
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 800158e:	bf00      	nop
    	TIM7->ARR = 937;
 8001590:	4b77      	ldr	r3, [pc, #476]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001592:	f240 32a9 	movw	r2, #937	; 0x3a9
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001598:	2108      	movs	r1, #8
 800159a:	4876      	ldr	r0, [pc, #472]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800159c:	f001 f85a 	bl	8002654 <HAL_GPIO_TogglePin>
 80015a0:	e034      	b.n	800160c <HAL_GPIO_EXTI_Callback+0x384>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a8:	d116      	bne.n	80015d8 <HAL_GPIO_EXTI_Callback+0x350>
 80015aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f001 f81f 	bl	80025f4 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_EXTI_Callback+0x350>
    {

//    	TIM7->ARR = 938;
//    	__NOP();
    	TIM16->ARR =1467;
 80015bc:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80015be:	f240 52bb 	movw	r2, #1467	; 0x5bb
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80015c4:	bf00      	nop
    	TIM7->ARR = 846;
 80015c6:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80015c8:	f240 324e 	movw	r2, #846	; 0x34e
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015ce:	2108      	movs	r1, #8
 80015d0:	4868      	ldr	r0, [pc, #416]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80015d2:	f001 f83f 	bl	8002654 <HAL_GPIO_TogglePin>
 80015d6:	e019      	b.n	800160c <HAL_GPIO_EXTI_Callback+0x384>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015de:	d115      	bne.n	800160c <HAL_GPIO_EXTI_Callback+0x384>
 80015e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 f804 	bl	80025f4 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <HAL_GPIO_EXTI_Callback+0x384>
    {

//    	TIM7->ARR = 938;
//    	__NOP();
    	TIM16->ARR =1466;
 80015f2:	4b5e      	ldr	r3, [pc, #376]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80015f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80015fa:	bf00      	nop
    	TIM7->ARR = 765;
 80015fc:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80015fe:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001604:	2108      	movs	r1, #8
 8001606:	485b      	ldr	r0, [pc, #364]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001608:	f001 f824 	bl	8002654 <HAL_GPIO_TogglePin>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f001 f806 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f000 ffff 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f000 fff8 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fff2 	bl	8002624 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d115      	bne.n	8001672 <HAL_GPIO_EXTI_Callback+0x3ea>
 8001646:	2108      	movs	r1, #8
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f000 ffd2 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_EXTI_Callback+0x3ea>
    {

//    	TIM7->ARR = 849;
//    	__NOP();
    	TIM16->ARR =1328;
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001658:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 800165e:	bf00      	nop
    	TIM7->ARR = 1034;
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001662:	f240 420a 	movw	r2, #1034	; 0x40a
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001668:	2108      	movs	r1, #8
 800166a:	4842      	ldr	r0, [pc, #264]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800166c:	f000 fff2 	bl	8002654 <HAL_GPIO_TogglePin>
 8001670:	e04d      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x486>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b80      	cmp	r3, #128	; 0x80
 8001676:	d115      	bne.n	80016a4 <HAL_GPIO_EXTI_Callback+0x41c>
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f000 ffb9 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00d      	beq.n	80016a4 <HAL_GPIO_EXTI_Callback+0x41c>
    {

//    	TIM7->ARR = 849;
//    	__NOP();
    	TIM16->ARR =1328;
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800168a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 8001690:	bf00      	nop
    	TIM7->ARR = 937;
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001694:	f240 32a9 	movw	r2, #937	; 0x3a9
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800169a:	2108      	movs	r1, #8
 800169c:	4835      	ldr	r0, [pc, #212]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800169e:	f000 ffd9 	bl	8002654 <HAL_GPIO_TogglePin>
 80016a2:	e034      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x486>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016aa:	d116      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x452>
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f000 ff9e 	bl	80025f4 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_EXTI_Callback+0x452>
    {

//    	TIM7->ARR = 849;
//    	__NOP();
    	TIM16->ARR =1328;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80016c0:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80016c6:	bf00      	nop
    	TIM7->ARR = 846;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80016ca:	f240 324e 	movw	r2, #846	; 0x34e
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016d0:	2108      	movs	r1, #8
 80016d2:	4828      	ldr	r0, [pc, #160]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80016d4:	f000 ffbe 	bl	8002654 <HAL_GPIO_TogglePin>
 80016d8:	e019      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x486>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e0:	d115      	bne.n	800170e <HAL_GPIO_EXTI_Callback+0x486>
 80016e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f000 ff83 	bl	80025f4 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00c      	beq.n	800170e <HAL_GPIO_EXTI_Callback+0x486>
    {

//    	TIM7->ARR = 849;
//    	__NOP();
    	TIM16->ARR =1328;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80016f6:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
    	__NOP();
 80016fc:	bf00      	nop
    	TIM7->ARR = 765;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001700:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001706:	2108      	movs	r1, #8
 8001708:	481a      	ldr	r0, [pc, #104]	; (8001774 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800170a:	f000 ffa3 	bl	8002654 <HAL_GPIO_TogglePin>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800170e:	2201      	movs	r2, #1
 8001710:	2102      	movs	r1, #2
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f000 ff85 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f000 ff7e 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f000 ff77 	bl	8002624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001736:	2201      	movs	r2, #1
 8001738:	2140      	movs	r1, #64	; 0x40
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f000 ff71 	bl	8002624 <HAL_GPIO_WritePin>

    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001744:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8001748:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_GPIO_EXTI_Callback+0x4f0>)
 800174c:	2202      	movs	r2, #2
 800174e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8001750:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f000 fde3 	bl	8002320 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_Callback+0x4f4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001760:	6013      	str	r3, [r2, #0]
  }


}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40014400 	.word	0x40014400
 8001770:	40001400 	.word	0x40001400
 8001774:	48000400 	.word	0x48000400
 8001778:	2000003c 	.word	0x2000003c
 800177c:	20000054 	.word	0x20000054
 8001780:	20000050 	.word	0x20000050

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6613      	str	r3, [r2, #96]	; 0x60
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f9fe 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001830:	2008      	movs	r0, #8
 8001832:	f000 ff29 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}

0800183a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800183e:	2080      	movs	r0, #128	; 0x80
 8001840:	f000 ff22 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001844:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001848:	f000 ff1e 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800184c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001850:	f000 ff1a 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800185e:	f002 f97b 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000130 	.word	0x20000130

0800186c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM6_DAC_IRQHandler+0x10>)
 8001872:	f000 fb9b 	bl	8001fac <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000028 	.word	0x20000028

08001880 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM7_IRQHandler+0x10>)
 8001886:	f002 f967 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000e4 	.word	0x200000e4

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_TIM7_Init+0x64>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_TIM7_Init+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_TIM7_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_TIM7_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_TIM7_Init+0x64>)
 80018dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_TIM7_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_TIM7_Init+0x64>)
 80018ea:	f002 f889 	bl	8003a00 <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018f4:	f7ff ff46 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_TIM7_Init+0x64>)
 8001906:	f002 fab5 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001910:	f7ff ff38 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200000e4 	.word	0x200000e4
 8001920:	40001400 	.word	0x40001400

08001924 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_TIM16_Init+0x44>)
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <MX_TIM16_Init+0x48>)
 800192c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_TIM16_Init+0x44>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_TIM16_Init+0x44>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_TIM16_Init+0x44>)
 800193c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001940:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_TIM16_Init+0x44>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_TIM16_Init+0x44>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_TIM16_Init+0x44>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_TIM16_Init+0x44>)
 8001956:	f002 f853 	bl	8003a00 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001960:	f7ff ff10 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000130 	.word	0x20000130
 800196c:	40014400 	.word	0x40014400

08001970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_TIM_Base_MspInit+0x78>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d114      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2037      	movs	r0, #55	; 0x37
 80019a0:	f000 fa5f 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019a4:	2037      	movs	r0, #55	; 0x37
 80019a6:	f000 fa78 	bl	8001e9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80019aa:	e018      	b.n	80019de <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	6613      	str	r3, [r2, #96]	; 0x60
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0x7c>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2019      	movs	r0, #25
 80019d4:	f000 fa45 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019d8:	2019      	movs	r0, #25
 80019da:	f000 fa5e 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40001400 	.word	0x40001400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40014400 	.word	0x40014400

080019f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <MX_USART2_UART_Init+0x5c>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART2_UART_Init+0x58>)
 8001a38:	f002 faa0 	bl	8003f7c <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a42:	f7ff fe9f 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000017c 	.word	0x2000017c
 8001a50:	40004400 	.word	0x40004400

08001a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09e      	sub	sp, #120	; 0x78
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	2254      	movs	r2, #84	; 0x54
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff10 	bl	800489a <memset>
  if(uartHandle->Instance==USART2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <HAL_UART_MspInit+0xcc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d148      	bne.n	8001b16 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fcbd 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a9c:	f7ff fe72 	bl	8001784 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_UART_MspInit+0xd0>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f000 fc17 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b04:	2303      	movs	r3, #3
 8001b06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f000 fc05 	bl	8002320 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3778      	adds	r7, #120	; 0x78
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40021000 	.word	0x40021000

08001b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b2c:	f7ff feb2 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopForever+0xe>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopForever+0x16>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f002 fea9 	bl	80048ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5a:	f7ff fa59 	bl	8001010 <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b6c:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 8001b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b74:	20000208 	.word	0x20000208

08001b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_IRQHandler>

08001b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f961 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f80e 	bl	8001bac <HAL_InitTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9c:	f7ff fdf8 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_InitTick+0x70>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f96d 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d809      	bhi.n	8001bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 f937 	bl	8001e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_InitTick+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e004      	b.n	8001c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000204 	.word	0x20000204

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000204 	.word	0x20000204

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e014      	b.n	8001f0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7fe ffc5 	bl	8000e80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_DAC_Start+0x16>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e03b      	b.n	8001fa0 <HAL_DAC_Start+0x8e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d118      	bne.n	8001f92 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	e00f      	b.n	8001f92 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f80:	d107      	bne.n	8001f92 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0202 	orr.w	r2, r2, #2
 8001f90:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc2:	d120      	bne.n	8002006 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd2:	d118      	bne.n	8002006 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f852 	bl	80020aa <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002014:	d120      	bne.n	8002058 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002024:	d118      	bne.n	8002058 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f043 0202 	orr.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002040:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002050:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f95a 	bl	800230c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3308      	adds	r3, #8
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e004      	b.n	8002094 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3314      	adds	r3, #20
 8002092:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b088      	sub	sp, #32
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	795b      	ldrb	r3, [r3, #5]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DAC_ConfigChannel+0x1c>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e114      	b.n	8002304 <HAL_DAC_ConfigChannel+0x246>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2202      	movs	r2, #2
 80020e4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	f040 8081 	bne.w	80021f2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80020f0:	f7ff fdac 	bl	8001c4c <HAL_GetTick>
 80020f4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d140      	bne.n	800217e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020fc:	e018      	b.n	8002130 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020fe:	f7ff fda5 	bl	8001c4c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d911      	bls.n	8002130 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f043 0208 	orr.w	r2, r3, #8
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2203      	movs	r2, #3
 800212a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0e9      	b.n	8002304 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1df      	bne.n	80020fe <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff fd90 	bl	8001c64 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	6992      	ldr	r2, [r2, #24]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
 800214e:	e023      	b.n	8002198 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002150:	f7ff fd7c 	bl	8001c4c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d90f      	bls.n	800217e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	2b00      	cmp	r3, #0
 8002166:	da0a      	bge.n	800217e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f043 0208 	orr.w	r2, r3, #8
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2203      	movs	r2, #3
 8002178:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0c2      	b.n	8002304 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	dbe3      	blt.n	8002150 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fd6b 	bl	8001c64 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	6992      	ldr	r2, [r2, #24]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	ea02 0103 	and.w	r1, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	21ff      	movs	r1, #255	; 0xff
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	ea02 0103 	and.w	r1, r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d11d      	bne.n	8002236 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2207      	movs	r2, #7
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	431a      	orrs	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	22c0      	movs	r2, #192	; 0xc0
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	400a      	ands	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232e:	e148      	b.n	80025c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 813a 	beq.w	80025bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d005      	beq.n	8002360 <HAL_GPIO_Init+0x40>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d130      	bne.n	80023c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002396:	2201      	movs	r2, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0201 	and.w	r2, r3, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d017      	beq.n	80023fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d123      	bne.n	8002452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8094 	beq.w	80025bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002494:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	4a51      	ldr	r2, [pc, #324]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6613      	str	r3, [r2, #96]	; 0x60
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 80024a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x2c4>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d6:	d00d      	beq.n	80024f4 <HAL_GPIO_Init+0x1d4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <HAL_GPIO_Init+0x2c8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_GPIO_Init+0x1d0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a42      	ldr	r2, [pc, #264]	; (80025ec <HAL_GPIO_Init+0x2cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_GPIO_Init+0x1cc>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e004      	b.n	80024f6 <HAL_GPIO_Init+0x1d6>
 80024ec:	2307      	movs	r3, #7
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x1d6>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_GPIO_Init+0x1d6>
 80024f4:	2300      	movs	r3, #0
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	f002 0203 	and.w	r2, r2, #3
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	4093      	lsls	r3, r2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002506:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_GPIO_Init+0x2c4>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f47f aeaf 	bne.w	8002330 <HAL_GPIO_Init+0x10>
  }
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010000 	.word	0x40010000
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002640:	e002      	b.n	8002648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43d9      	mvns	r1, r3
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	400b      	ands	r3, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fdee 	bl	8001288 <HAL_GPIO_EXTI_Callback>
  }
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000

080026f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002702:	d130      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002710:	d038      	beq.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2232      	movs	r2, #50	; 0x32
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002738:	e002      	b.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3b01      	subs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d102      	bne.n	8002754 <HAL_PWREx_ControlVoltageScaling+0x60>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f2      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002760:	d110      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e00f      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d007      	beq.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002782:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40007000 	.word	0x40007000
 8002798:	20000000 	.word	0x20000000
 800279c:	431bde83 	.word	0x431bde83

080027a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f000 bc02 	b.w	8002fb8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b4:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027be:	4b94      	ldr	r3, [pc, #592]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80e4 	beq.w	800299e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_RCC_OscConfig+0x4c>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	f040 808b 	bne.w	80028fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 8087 	bne.w	80028fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x64>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e3d9      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_RCC_OscConfig+0x7e>
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	e005      	b.n	800282a <HAL_RCC_OscConfig+0x8a>
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282a:	4293      	cmp	r3, r2
 800282c:	d223      	bcs.n	8002876 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fd8c 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e3ba      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002842:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	496d      	ldr	r1, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4968      	ldr	r1, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e025      	b.n	80028c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002876:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4960      	ldr	r1, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002894:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	495b      	ldr	r1, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fd4c 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e37a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c2:	f000 fc81 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4950      	ldr	r1, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a4e      	ldr	r2, [pc, #312]	; (8002a18 <HAL_RCC_OscConfig+0x278>)
 80028e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f960 	bl	8001bac <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d052      	beq.n	800299c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	e35e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d032      	beq.n	8002968 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290e:	f7ff f99d 	bl	8001c4c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002916:	f7ff f999 	bl	8001c4c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e347      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a35      	ldr	r2, [pc, #212]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4930      	ldr	r1, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	492b      	ldr	r1, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e01a      	b.n	800299e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002974:	f7ff f96a 	bl	8001c4c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297c:	f7ff f966 	bl	8001c4c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e314      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1dc>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d073      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x21c>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d10e      	bne.n	80029d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d063      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d15f      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e2f1      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x24c>
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e025      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d114      	bne.n	8002a20 <HAL_RCC_OscConfig+0x280>
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a02      	ldr	r2, [pc, #8]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e013      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08005990 	.word	0x08005990
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	4ba0      	ldr	r3, [pc, #640]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a9f      	ldr	r2, [pc, #636]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a9c      	ldr	r2, [pc, #624]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f904 	bl	8001c4c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff f900 	bl	8001c4c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e2ae      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2a8>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f8f0 	bl	8001c4c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff f8ec 	bl	8001c4c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e29a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a82:	4b88      	ldr	r3, [pc, #544]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2d0>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d060      	beq.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x310>
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d119      	bne.n	8002ade <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d116      	bne.n	8002ade <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab0:	4b7c      	ldr	r3, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x328>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e277      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	4973      	ldr	r1, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002adc:	e040      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d023      	beq.n	8002b2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7ff f8ab 	bl	8001c4c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afa:	f7ff f8a7 	bl	8001c4c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e255      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	495f      	ldr	r1, [pc, #380]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	e018      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7ff f887 	bl	8001c4c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b42:	f7ff f883 	bl	8001c4c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e231      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d03c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01c      	beq.n	8002bae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff f862 	bl	8001c4c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f85e 	bl	8001c4c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e20c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ef      	beq.n	8002b8c <HAL_RCC_OscConfig+0x3ec>
 8002bac:	e01b      	b.n	8002be6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7ff f845 	bl	8001c4c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7ff f841 	bl	8001c4c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1ef      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ef      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a6 	beq.w	8002d40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x508>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d118      	bne.n	8002c5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x508>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x508>)
 8002c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c38:	f7ff f808 	bl	8001c4c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7ff f804 	bl	8001c4c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1b2      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x508>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4d8>
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c76:	e029      	b.n	8002ccc <HAL_RCC_OscConfig+0x52c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d115      	bne.n	8002cac <HAL_RCC_OscConfig+0x50c>
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <HAL_RCC_OscConfig+0x504>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca0:	e014      	b.n	8002ccc <HAL_RCC_OscConfig+0x52c>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	4b9a      	ldr	r3, [pc, #616]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	4a99      	ldr	r2, [pc, #612]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cbc:	4b96      	ldr	r3, [pc, #600]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	4a95      	ldr	r2, [pc, #596]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe ffba 	bl	8001c4c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe ffb6 	bl	8001c4c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e162      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ed      	beq.n	8002cdc <HAL_RCC_OscConfig+0x53c>
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe ffa3 	bl	8001c4c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe ff9f 	bl	8001c4c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e14b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d20:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ed      	bne.n	8002d0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a77      	ldr	r2, [pc, #476]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d54:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe ff72 	bl	8001c4c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6c:	f7fe ff6e 	bl	8001c4c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e11c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x5cc>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d94:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe ff55 	bl	8001c4c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7fe ff51 	bl	8001c4c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0ff      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db8:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80f3 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f040 80c9 	bne.w	8002f6c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0203 	and.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d12c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d123      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d11b      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d113      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d109      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d06b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d062      	beq.n	8002f14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0ac      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e6a:	f7fe feef 	bl	8001c4c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe feeb 	bl	8001c4c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e099      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x77c>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eaa:	0212      	lsls	r2, r2, #8
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eb2:	0852      	lsrs	r2, r2, #1
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0552      	lsls	r2, r2, #21
 8002eb8:	4311      	orrs	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0652      	lsls	r2, r2, #25
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eca:	06d2      	lsls	r2, r2, #27
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	4912      	ldr	r1, [pc, #72]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eec:	f7fe feae 	bl	8001c4c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe feaa 	bl	8001c4c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e058      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCC_OscConfig+0x778>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f12:	e050      	b.n	8002fb6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d144      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f44:	f7fe fe82 	bl	8001c4c <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fe7e 	bl	8001c4c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e02c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x7ac>
 8002f6a:	e024      	b.n	8002fb6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d01f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fe65 	bl	8001c4c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fe61 	bl	8001c4c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4905      	ldr	r1, [pc, #20]	; (8002fc0 <HAL_RCC_OscConfig+0x820>)
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x824>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
 8002fb0:	e001      	b.n	8002fb6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	feeefffc 	.word	0xfeeefffc

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0e7      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b72      	ldr	r3, [pc, #456]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4970      	ldr	r1, [pc, #448]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b6e      	ldr	r3, [pc, #440]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0cf      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	429a      	cmp	r2, r3
 8003026:	d908      	bls.n	800303a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4960      	ldr	r1, [pc, #384]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04c      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d121      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0a6      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d115      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e09a      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307e:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08e      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e086      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309e:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4943      	ldr	r1, [pc, #268]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b0:	f7fe fdcc 	bl	8001c4c <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe fdc8 	bl	8001c4c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e06e      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 020c 	and.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1eb      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d208      	bcs.n	800310e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	492b      	ldr	r1, [pc, #172]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d210      	bcs.n	800313e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	4923      	ldr	r1, [pc, #140]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e036      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4918      	ldr	r1, [pc, #96]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4910      	ldr	r1, [pc, #64]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317c:	f000 f824 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	490b      	ldr	r1, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1f4>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1f8>)
 800319a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1fc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fd03 	bl	8001bac <HAL_InitTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08005990 	.word	0x08005990
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d121      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d11e      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003224:	4a2b      	ldr	r2, [pc, #172]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d102      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e004      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d101      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 800324e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d134      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0xa6>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xac>
 800326c:	e005      	b.n	800327a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003270:	617b      	str	r3, [r7, #20]
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003276:	617b      	str	r3, [r7, #20]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	617b      	str	r3, [r7, #20]
      break;
 800327e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	3301      	adds	r3, #1
 800328c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	fb03 f202 	mul.w	r2, r3, r2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0e5b      	lsrs	r3, r3, #25
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	3301      	adds	r3, #1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032c0:	69bb      	ldr	r3, [r7, #24]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	080059a8 	.word	0x080059a8
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4904      	ldr	r1, [pc, #16]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	080059a0 	.word	0x080059a0

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003328:	f7ff ffda 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCC_GetPCLK2Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	080059a0 	.word	0x080059a0

08003350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003368:	f7ff f9b6 	bl	80026d8 <HAL_PWREx_GetVoltageRange>
 800336c:	6178      	str	r0, [r7, #20]
 800336e:	e014      	b.n	800339a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4a24      	ldr	r2, [pc, #144]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f9a6 	bl	80026d8 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a0:	d10b      	bne.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d919      	bls.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2ba0      	cmp	r3, #160	; 0xa0
 80033ac:	d902      	bls.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ae:	2302      	movs	r3, #2
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e013      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e010      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d902      	bls.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033c0:	2303      	movs	r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e00a      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	d102      	bne.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033cc:	2302      	movs	r3, #2
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e004      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b70      	cmp	r3, #112	; 0x70
 80033d6:	d101      	bne.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d8:	2301      	movs	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 0207 	bic.w	r2, r3, #7
 80033e4:	4909      	ldr	r1, [pc, #36]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	40022000 	.word	0x40022000

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003418:	2300      	movs	r3, #0
 800341a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800341c:	2300      	movs	r3, #0
 800341e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003428:	2b00      	cmp	r3, #0
 800342a:	d031      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003434:	d01a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800343a:	d814      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003444:	d10f      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4a5c      	ldr	r2, [pc, #368]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003452:	e00c      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f9de 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003464:	e003      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	74fb      	strb	r3, [r7, #19]
      break;
 800346a:	e000      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800346c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	494e      	ldr	r1, [pc, #312]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 809e 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a39      	ldr	r2, [pc, #228]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fbb4 	bl	8001c4c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fe fbb0 	bl	8001c4c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	74fb      	strb	r3, [r7, #19]
        break;
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d15a      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350e:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	429a      	cmp	r2, r3
 8003528:	d019      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003556:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fb70 	bl	8001c4c <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	e00b      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe fb6c 	bl	8001c4c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d902      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	74fb      	strb	r3, [r7, #19]
            break;
 8003586:	e006      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ec      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c8:	7c7b      	ldrb	r3, [r7, #17]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b8a      	ldr	r3, [pc, #552]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4a89      	ldr	r2, [pc, #548]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e6:	4b84      	ldr	r3, [pc, #528]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f023 0203 	bic.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4980      	ldr	r1, [pc, #512]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003608:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 020c 	bic.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	4978      	ldr	r1, [pc, #480]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	496f      	ldr	r1, [pc, #444]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364c:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	4967      	ldr	r1, [pc, #412]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800366e:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	495e      	ldr	r1, [pc, #376]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4956      	ldr	r1, [pc, #344]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	494d      	ldr	r1, [pc, #308]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d028      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4945      	ldr	r1, [pc, #276]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d106      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
 8003700:	e011      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370a:	d10c      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f882 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d028      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	492d      	ldr	r1, [pc, #180]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003750:	d106      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375c:	60d3      	str	r3, [r2, #12]
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f853 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ae:	d10c      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f830 	bl	800381c <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800382a:	4b74      	ldr	r3, [pc, #464]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003836:	4b71      	ldr	r3, [pc, #452]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0203 	and.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d10d      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
       ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800384e:	4b6b      	ldr	r3, [pc, #428]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
       ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d047      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e044      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d018      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x86>
 8003870:	2b03      	cmp	r3, #3
 8003872:	d825      	bhi.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d002      	beq.n	800387e <RCCEx_PLLSAI1_Config+0x62>
 8003878:	2b02      	cmp	r3, #2
 800387a:	d009      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x74>
 800387c:	e020      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388e:	e01a      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e013      	b.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038a2:	4b56      	ldr	r3, [pc, #344]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ae:	4b53      	ldr	r3, [pc, #332]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038be:	e006      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e004      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038d6:	4b49      	ldr	r3, [pc, #292]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	430b      	orrs	r3, r1
 80038ec:	4943      	ldr	r1, [pc, #268]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d17c      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f8:	4b40      	ldr	r3, [pc, #256]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fe f9a2 	bl	8001c4c <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800390a:	e009      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390c:	f7fe f99e 	bl	8001c4c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d902      	bls.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
        break;
 800391e:	e005      	b.n	800392c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ef      	bne.n	800390c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d15f      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	06d2      	lsls	r2, r2, #27
 8003950:	430a      	orrs	r2, r1
 8003952:	492a      	ldr	r1, [pc, #168]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
 8003958:	e027      	b.n	80039aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d112      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003960:	4b26      	ldr	r3, [pc, #152]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6912      	ldr	r2, [r2, #16]
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0552      	lsls	r2, r2, #21
 800397c:	430a      	orrs	r2, r1
 800397e:	491f      	ldr	r1, [pc, #124]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
 8003984:	e011      	b.n	80039aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800398e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	0211      	lsls	r1, r2, #8
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6952      	ldr	r2, [r2, #20]
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0652      	lsls	r2, r2, #25
 80039a2:	430a      	orrs	r2, r1
 80039a4:	4915      	ldr	r1, [pc, #84]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fe f949 	bl	8001c4c <HAL_GetTick>
 80039ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039bc:	e009      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039be:	f7fe f945 	bl	8001c4c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d902      	bls.n	80039d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	73fb      	strb	r3, [r7, #15]
          break;
 80039d0:	e005      	b.n	80039de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ef      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e049      	b.n	8003aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd ffa2 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 f9b4 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e03b      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_TIM_Base_Start_IT+0x9c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x4e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x4e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_TIM_Base_Start_IT+0xa0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d115      	bne.n	8003b2a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_TIM_Base_Start_IT+0xa4>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d015      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d011      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	e008      	b.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e000      	b.n	8003b3e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40014000 	.word	0x40014000
 8003b54:	00010007 	.word	0x00010007

08003b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01b      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0202 	mvn.w	r2, #2
 8003b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8e4 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8d6 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8e7 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d020      	beq.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0204 	mvn.w	r2, #4
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8be 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8b0 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f8c1 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d020      	beq.n	8003c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0208 	mvn.w	r2, #8
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f898 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f88a 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f89b 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2208      	movs	r2, #8
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f872 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f864 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f875 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0201 	mvn.w	r2, #1
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fa96 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f936 	bl	8003f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f92e 	bl	8003f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f834 	bl	8003d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0220 	mvn.w	r2, #32
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8f6 	bl	8003f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <TIM_Base_SetConfig+0xbc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0x20>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d108      	bne.n	8003dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <TIM_Base_SetConfig+0xbc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0x52>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x52>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <TIM_Base_SetConfig+0xc0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x52>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <TIM_Base_SetConfig+0xc4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <TIM_Base_SetConfig+0xbc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0xa0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <TIM_Base_SetConfig+0xc0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0xa0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <TIM_Base_SetConfig+0xc4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d103      	bne.n	8003e54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	615a      	str	r2, [r3, #20]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e04f      	b.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10c      	bne.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014000 	.word	0x40014000

08003f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e040      	b.n	8004010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fd58 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fa54 	bl	8004470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f825 	bl	8004018 <UART_SetConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01b      	b.n	8004010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fad3 	bl	80045b4 <UART_CheckIdleState>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b08a      	sub	sp, #40	; 0x28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4313      	orrs	r3, r2
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4bb4      	ldr	r3, [pc, #720]	; (8004318 <UART_SetConfig+0x300>)
 8004048:	4013      	ands	r3, r2
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004050:	430b      	orrs	r3, r1
 8004052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4aa9      	ldr	r2, [pc, #676]	; (800431c <UART_SetConfig+0x304>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	4313      	orrs	r3, r2
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4aa0      	ldr	r2, [pc, #640]	; (8004320 <UART_SetConfig+0x308>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d126      	bne.n	80040f0 <UART_SetConfig+0xd8>
 80040a2:	4ba0      	ldr	r3, [pc, #640]	; (8004324 <UART_SetConfig+0x30c>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d81b      	bhi.n	80040e8 <UART_SetConfig+0xd0>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0xa0>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040d9 	.word	0x080040d9
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ce:	e080      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80040d0:	2302      	movs	r3, #2
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d6:	e07c      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80040d8:	2304      	movs	r3, #4
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040de:	e078      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80040e0:	2308      	movs	r3, #8
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e074      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80040e8:	2310      	movs	r3, #16
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ee:	e070      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a8c      	ldr	r2, [pc, #560]	; (8004328 <UART_SetConfig+0x310>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d138      	bne.n	800416c <UART_SetConfig+0x154>
 80040fa:	4b8a      	ldr	r3, [pc, #552]	; (8004324 <UART_SetConfig+0x30c>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d82d      	bhi.n	8004164 <UART_SetConfig+0x14c>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0xf8>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004145 	.word	0x08004145
 8004114:	08004165 	.word	0x08004165
 8004118:	08004165 	.word	0x08004165
 800411c:	08004165 	.word	0x08004165
 8004120:	08004155 	.word	0x08004155
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
 800412c:	08004165 	.word	0x08004165
 8004130:	0800414d 	.word	0x0800414d
 8004134:	08004165 	.word	0x08004165
 8004138:	08004165 	.word	0x08004165
 800413c:	08004165 	.word	0x08004165
 8004140:	0800415d 	.word	0x0800415d
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e042      	b.n	80041d2 <UART_SetConfig+0x1ba>
 800414c:	2302      	movs	r3, #2
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e03e      	b.n	80041d2 <UART_SetConfig+0x1ba>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e03a      	b.n	80041d2 <UART_SetConfig+0x1ba>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e036      	b.n	80041d2 <UART_SetConfig+0x1ba>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e032      	b.n	80041d2 <UART_SetConfig+0x1ba>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6a      	ldr	r2, [pc, #424]	; (800431c <UART_SetConfig+0x304>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d12a      	bne.n	80041cc <UART_SetConfig+0x1b4>
 8004176:	4b6b      	ldr	r3, [pc, #428]	; (8004324 <UART_SetConfig+0x30c>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004184:	d01a      	beq.n	80041bc <UART_SetConfig+0x1a4>
 8004186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418a:	d81b      	bhi.n	80041c4 <UART_SetConfig+0x1ac>
 800418c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004190:	d00c      	beq.n	80041ac <UART_SetConfig+0x194>
 8004192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004196:	d815      	bhi.n	80041c4 <UART_SetConfig+0x1ac>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <UART_SetConfig+0x18c>
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d008      	beq.n	80041b4 <UART_SetConfig+0x19c>
 80041a2:	e00f      	b.n	80041c4 <UART_SetConfig+0x1ac>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e012      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e00e      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80041b4:	2304      	movs	r3, #4
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e00a      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80041bc:	2308      	movs	r3, #8
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e006      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e002      	b.n	80041d2 <UART_SetConfig+0x1ba>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a51      	ldr	r2, [pc, #324]	; (800431c <UART_SetConfig+0x304>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d17a      	bne.n	80042d2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d824      	bhi.n	800422e <UART_SetConfig+0x216>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x1d4>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004211 	.word	0x08004211
 80041f0:	0800422f 	.word	0x0800422f
 80041f4:	08004219 	.word	0x08004219
 80041f8:	0800422f 	.word	0x0800422f
 80041fc:	0800421f 	.word	0x0800421f
 8004200:	0800422f 	.word	0x0800422f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800422f 	.word	0x0800422f
 800420c:	08004227 	.word	0x08004227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7ff f872 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
        break;
 8004216:	e010      	b.n	800423a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004218:	4b44      	ldr	r3, [pc, #272]	; (800432c <UART_SetConfig+0x314>)
 800421a:	61fb      	str	r3, [r7, #28]
        break;
 800421c:	e00d      	b.n	800423a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421e:	f7fe ffd3 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8004222:	61f8      	str	r0, [r7, #28]
        break;
 8004224:	e009      	b.n	800423a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422a:	61fb      	str	r3, [r7, #28]
        break;
 800422c:	e005      	b.n	800423a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8107 	beq.w	8004450 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	429a      	cmp	r2, r3
 8004250:	d305      	bcc.n	800425e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	429a      	cmp	r2, r3
 800425c:	d903      	bls.n	8004266 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004264:	e0f4      	b.n	8004450 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2200      	movs	r2, #0
 800426a:	461c      	mov	r4, r3
 800426c:	4615      	mov	r5, r2
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	022b      	lsls	r3, r5, #8
 8004278:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800427c:	0222      	lsls	r2, r4, #8
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	6849      	ldr	r1, [r1, #4]
 8004282:	0849      	lsrs	r1, r1, #1
 8004284:	2000      	movs	r0, #0
 8004286:	4688      	mov	r8, r1
 8004288:	4681      	mov	r9, r0
 800428a:	eb12 0a08 	adds.w	sl, r2, r8
 800428e:	eb43 0b09 	adc.w	fp, r3, r9
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a0:	4650      	mov	r0, sl
 80042a2:	4659      	mov	r1, fp
 80042a4:	f7fc fc32 	bl	8000b0c <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b6:	d308      	bcc.n	80042ca <UART_SetConfig+0x2b2>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042be:	d204      	bcs.n	80042ca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	e0c2      	b.n	8004450 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042d0:	e0be      	b.n	8004450 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042da:	d16a      	bne.n	80043b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80042dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d834      	bhi.n	800434e <UART_SetConfig+0x336>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x2d4>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004339 	.word	0x08004339
 80042f8:	0800434f 	.word	0x0800434f
 80042fc:	0800433f 	.word	0x0800433f
 8004300:	0800434f 	.word	0x0800434f
 8004304:	0800434f 	.word	0x0800434f
 8004308:	0800434f 	.word	0x0800434f
 800430c:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fff2 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004314:	61f8      	str	r0, [r7, #28]
        break;
 8004316:	e020      	b.n	800435a <UART_SetConfig+0x342>
 8004318:	efff69f3 	.word	0xefff69f3
 800431c:	40008000 	.word	0x40008000
 8004320:	40013800 	.word	0x40013800
 8004324:	40021000 	.word	0x40021000
 8004328:	40004400 	.word	0x40004400
 800432c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fff8 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8004334:	61f8      	str	r0, [r7, #28]
        break;
 8004336:	e010      	b.n	800435a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b4c      	ldr	r3, [pc, #304]	; (800446c <UART_SetConfig+0x454>)
 800433a:	61fb      	str	r3, [r7, #28]
        break;
 800433c:	e00d      	b.n	800435a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe ff43 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8004342:	61f8      	str	r0, [r7, #28]
        break;
 8004344:	e009      	b.n	800435a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	61fb      	str	r3, [r7, #28]
        break;
 800434c:	e005      	b.n	800435a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d077      	beq.n	8004450 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005a      	lsls	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b0f      	cmp	r3, #15
 800437a:	d916      	bls.n	80043aa <UART_SetConfig+0x392>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004382:	d212      	bcs.n	80043aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f023 030f 	bic.w	r3, r3, #15
 800438c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	b29a      	uxth	r2, r3
 800439a:	8afb      	ldrh	r3, [r7, #22]
 800439c:	4313      	orrs	r3, r2
 800439e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	8afa      	ldrh	r2, [r7, #22]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e052      	b.n	8004450 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043b0:	e04e      	b.n	8004450 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d827      	bhi.n	800440a <UART_SetConfig+0x3f2>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x3a8>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	0800440b 	.word	0x0800440b
 80043d0:	080043fb 	.word	0x080043fb
 80043d4:	0800440b 	.word	0x0800440b
 80043d8:	0800440b 	.word	0x0800440b
 80043dc:	0800440b 	.word	0x0800440b
 80043e0:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe ff88 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 80043e8:	61f8      	str	r0, [r7, #28]
        break;
 80043ea:	e014      	b.n	8004416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe ff9a 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80043f0:	61f8      	str	r0, [r7, #28]
        break;
 80043f2:	e010      	b.n	8004416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <UART_SetConfig+0x454>)
 80043f6:	61fb      	str	r3, [r7, #28]
        break;
 80043f8:	e00d      	b.n	8004416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fe fee5 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 80043fe:	61f8      	str	r0, [r7, #28]
        break;
 8004400:	e009      	b.n	8004416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	61fb      	str	r3, [r7, #28]
        break;
 8004408:	e005      	b.n	8004416 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004414:	bf00      	nop
    }

    if (pclk != 0U)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d019      	beq.n	8004450 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	085a      	lsrs	r2, r3, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	d909      	bls.n	800444a <UART_SetConfig+0x432>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d205      	bcs.n	800444a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e002      	b.n	8004450 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800445c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	; 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	00f42400 	.word	0x00f42400

08004470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01a      	beq.n	8004586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456e:	d10a      	bne.n	8004586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b098      	sub	sp, #96	; 0x60
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c4:	f7fd fb42 	bl	8001c4c <HAL_GetTick>
 80045c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d12e      	bne.n	8004636 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f88c 	bl	8004704 <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d021      	beq.n	8004636 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
 8004612:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e062      	b.n	80046fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d149      	bne.n	80046d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f856 	bl	8004704 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03c      	beq.n	80046d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	623b      	str	r3, [r7, #32]
   return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
 800467e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	617b      	str	r3, [r7, #20]
   return(result);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e5      	bne.n	8004690 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e011      	b.n	80046fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3758      	adds	r7, #88	; 0x58
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004714:	e049      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d045      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd fa95 	bl	8001c4c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <UART_WaitOnFlagUntilTimeout+0x30>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e048      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d031      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b08      	cmp	r3, #8
 8004752:	d110      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2208      	movs	r2, #8
 800475a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f838 	bl	80047d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2208      	movs	r2, #8
 8004766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e029      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004784:	d111      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f81e 	bl	80047d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00f      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0a6      	beq.n	8004716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b095      	sub	sp, #84	; 0x54
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
 80047fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	61fb      	str	r3, [r7, #28]
   return(result);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	60bb      	str	r3, [r7, #8]
   return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 0310 	bic.w	r3, r3, #16
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e6      	bne.n	8004848 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800488e:	bf00      	nop
 8004890:	3754      	adds	r7, #84	; 0x54
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <memset>:
 800489a:	4402      	add	r2, r0
 800489c:	4603      	mov	r3, r0
 800489e:	4293      	cmp	r3, r2
 80048a0:	d100      	bne.n	80048a4 <memset+0xa>
 80048a2:	4770      	bx	lr
 80048a4:	f803 1b01 	strb.w	r1, [r3], #1
 80048a8:	e7f9      	b.n	800489e <memset+0x4>
	...

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4d0d      	ldr	r5, [pc, #52]	; (80048e4 <__libc_init_array+0x38>)
 80048b0:	4c0d      	ldr	r4, [pc, #52]	; (80048e8 <__libc_init_array+0x3c>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	2600      	movs	r6, #0
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	4d0b      	ldr	r5, [pc, #44]	; (80048ec <__libc_init_array+0x40>)
 80048be:	4c0c      	ldr	r4, [pc, #48]	; (80048f0 <__libc_init_array+0x44>)
 80048c0:	f001 f85a 	bl	8005978 <_init>
 80048c4:	1b64      	subs	r4, r4, r5
 80048c6:	10a4      	asrs	r4, r4, #2
 80048c8:	2600      	movs	r6, #0
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	f855 3b04 	ldr.w	r3, [r5], #4
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	08005bb8 	.word	0x08005bb8
 80048e8:	08005bb8 	.word	0x08005bb8
 80048ec:	08005bb8 	.word	0x08005bb8
 80048f0:	08005bbc 	.word	0x08005bbc
 80048f4:	00000000 	.word	0x00000000

080048f8 <sin>:
 80048f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048fa:	ec53 2b10 	vmov	r2, r3, d0
 80048fe:	4828      	ldr	r0, [pc, #160]	; (80049a0 <sin+0xa8>)
 8004900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004904:	4281      	cmp	r1, r0
 8004906:	dc07      	bgt.n	8004918 <sin+0x20>
 8004908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004998 <sin+0xa0>
 800490c:	2000      	movs	r0, #0
 800490e:	b005      	add	sp, #20
 8004910:	f85d eb04 	ldr.w	lr, [sp], #4
 8004914:	f000 b910 	b.w	8004b38 <__kernel_sin>
 8004918:	4822      	ldr	r0, [pc, #136]	; (80049a4 <sin+0xac>)
 800491a:	4281      	cmp	r1, r0
 800491c:	dd09      	ble.n	8004932 <sin+0x3a>
 800491e:	ee10 0a10 	vmov	r0, s0
 8004922:	4619      	mov	r1, r3
 8004924:	f7fb fc58 	bl	80001d8 <__aeabi_dsub>
 8004928:	ec41 0b10 	vmov	d0, r0, r1
 800492c:	b005      	add	sp, #20
 800492e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004932:	4668      	mov	r0, sp
 8004934:	f000 f9c0 	bl	8004cb8 <__ieee754_rem_pio2>
 8004938:	f000 0003 	and.w	r0, r0, #3
 800493c:	2801      	cmp	r0, #1
 800493e:	d00c      	beq.n	800495a <sin+0x62>
 8004940:	2802      	cmp	r0, #2
 8004942:	d011      	beq.n	8004968 <sin+0x70>
 8004944:	b9f0      	cbnz	r0, 8004984 <sin+0x8c>
 8004946:	ed9d 1b02 	vldr	d1, [sp, #8]
 800494a:	ed9d 0b00 	vldr	d0, [sp]
 800494e:	2001      	movs	r0, #1
 8004950:	f000 f8f2 	bl	8004b38 <__kernel_sin>
 8004954:	ec51 0b10 	vmov	r0, r1, d0
 8004958:	e7e6      	b.n	8004928 <sin+0x30>
 800495a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800495e:	ed9d 0b00 	vldr	d0, [sp]
 8004962:	f000 f821 	bl	80049a8 <__kernel_cos>
 8004966:	e7f5      	b.n	8004954 <sin+0x5c>
 8004968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800496c:	ed9d 0b00 	vldr	d0, [sp]
 8004970:	2001      	movs	r0, #1
 8004972:	f000 f8e1 	bl	8004b38 <__kernel_sin>
 8004976:	ec53 2b10 	vmov	r2, r3, d0
 800497a:	ee10 0a10 	vmov	r0, s0
 800497e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004982:	e7d1      	b.n	8004928 <sin+0x30>
 8004984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004988:	ed9d 0b00 	vldr	d0, [sp]
 800498c:	f000 f80c 	bl	80049a8 <__kernel_cos>
 8004990:	e7f1      	b.n	8004976 <sin+0x7e>
 8004992:	bf00      	nop
 8004994:	f3af 8000 	nop.w
	...
 80049a0:	3fe921fb 	.word	0x3fe921fb
 80049a4:	7fefffff 	.word	0x7fefffff

080049a8 <__kernel_cos>:
 80049a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	ec57 6b10 	vmov	r6, r7, d0
 80049b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80049b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80049b8:	ed8d 1b00 	vstr	d1, [sp]
 80049bc:	da07      	bge.n	80049ce <__kernel_cos+0x26>
 80049be:	ee10 0a10 	vmov	r0, s0
 80049c2:	4639      	mov	r1, r7
 80049c4:	f7fc f85a 	bl	8000a7c <__aeabi_d2iz>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	f000 8088 	beq.w	8004ade <__kernel_cos+0x136>
 80049ce:	4632      	mov	r2, r6
 80049d0:	463b      	mov	r3, r7
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	f7fb fdb7 	bl	8000548 <__aeabi_dmul>
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <__kernel_cos+0x178>)
 80049dc:	2200      	movs	r2, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	460d      	mov	r5, r1
 80049e2:	f7fb fdb1 	bl	8000548 <__aeabi_dmul>
 80049e6:	a340      	add	r3, pc, #256	; (adr r3, 8004ae8 <__kernel_cos+0x140>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	4682      	mov	sl, r0
 80049ee:	468b      	mov	fp, r1
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fb fda8 	bl	8000548 <__aeabi_dmul>
 80049f8:	a33d      	add	r3, pc, #244	; (adr r3, 8004af0 <__kernel_cos+0x148>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb fbed 	bl	80001dc <__adddf3>
 8004a02:	4622      	mov	r2, r4
 8004a04:	462b      	mov	r3, r5
 8004a06:	f7fb fd9f 	bl	8000548 <__aeabi_dmul>
 8004a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8004af8 <__kernel_cos+0x150>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f7fb fbe2 	bl	80001d8 <__aeabi_dsub>
 8004a14:	4622      	mov	r2, r4
 8004a16:	462b      	mov	r3, r5
 8004a18:	f7fb fd96 	bl	8000548 <__aeabi_dmul>
 8004a1c:	a338      	add	r3, pc, #224	; (adr r3, 8004b00 <__kernel_cos+0x158>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fbdb 	bl	80001dc <__adddf3>
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f7fb fd8d 	bl	8000548 <__aeabi_dmul>
 8004a2e:	a336      	add	r3, pc, #216	; (adr r3, 8004b08 <__kernel_cos+0x160>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fbd0 	bl	80001d8 <__aeabi_dsub>
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	f7fb fd84 	bl	8000548 <__aeabi_dmul>
 8004a40:	a333      	add	r3, pc, #204	; (adr r3, 8004b10 <__kernel_cos+0x168>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fbc9 	bl	80001dc <__adddf3>
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	f7fb fd7b 	bl	8000548 <__aeabi_dmul>
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	f7fb fd77 	bl	8000548 <__aeabi_dmul>
 8004a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5e:	4604      	mov	r4, r0
 8004a60:	460d      	mov	r5, r1
 8004a62:	4630      	mov	r0, r6
 8004a64:	4639      	mov	r1, r7
 8004a66:	f7fb fd6f 	bl	8000548 <__aeabi_dmul>
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7fb fbb1 	bl	80001d8 <__aeabi_dsub>
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <__kernel_cos+0x17c>)
 8004a78:	4598      	cmp	r8, r3
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	dc10      	bgt.n	8004aa2 <__kernel_cos+0xfa>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4650      	mov	r0, sl
 8004a86:	4659      	mov	r1, fp
 8004a88:	f7fb fba6 	bl	80001d8 <__aeabi_dsub>
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4926      	ldr	r1, [pc, #152]	; (8004b28 <__kernel_cos+0x180>)
 8004a90:	4602      	mov	r2, r0
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7fb fba0 	bl	80001d8 <__aeabi_dsub>
 8004a98:	ec41 0b10 	vmov	d0, r0, r1
 8004a9c:	b003      	add	sp, #12
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <__kernel_cos+0x184>)
 8004aa4:	4920      	ldr	r1, [pc, #128]	; (8004b28 <__kernel_cos+0x180>)
 8004aa6:	4598      	cmp	r8, r3
 8004aa8:	bfcc      	ite	gt
 8004aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8004b30 <__kernel_cos+0x188>)
 8004aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004ab0:	2400      	movs	r4, #0
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f7fb fb8e 	bl	80001d8 <__aeabi_dsub>
 8004abc:	4622      	mov	r2, r4
 8004abe:	4680      	mov	r8, r0
 8004ac0:	4689      	mov	r9, r1
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	f7fb fb86 	bl	80001d8 <__aeabi_dsub>
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	f7fb fb82 	bl	80001d8 <__aeabi_dsub>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	e7da      	b.n	8004a94 <__kernel_cos+0xec>
 8004ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004b18 <__kernel_cos+0x170>
 8004ae2:	e7db      	b.n	8004a9c <__kernel_cos+0xf4>
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	be8838d4 	.word	0xbe8838d4
 8004aec:	bda8fae9 	.word	0xbda8fae9
 8004af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004af4:	3e21ee9e 	.word	0x3e21ee9e
 8004af8:	809c52ad 	.word	0x809c52ad
 8004afc:	3e927e4f 	.word	0x3e927e4f
 8004b00:	19cb1590 	.word	0x19cb1590
 8004b04:	3efa01a0 	.word	0x3efa01a0
 8004b08:	16c15177 	.word	0x16c15177
 8004b0c:	3f56c16c 	.word	0x3f56c16c
 8004b10:	5555554c 	.word	0x5555554c
 8004b14:	3fa55555 	.word	0x3fa55555
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	3ff00000 	.word	0x3ff00000
 8004b20:	3fe00000 	.word	0x3fe00000
 8004b24:	3fd33332 	.word	0x3fd33332
 8004b28:	3ff00000 	.word	0x3ff00000
 8004b2c:	3fe90000 	.word	0x3fe90000
 8004b30:	3fd20000 	.word	0x3fd20000
 8004b34:	00000000 	.word	0x00000000

08004b38 <__kernel_sin>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	ed2d 8b04 	vpush	{d8-d9}
 8004b40:	eeb0 8a41 	vmov.f32	s16, s2
 8004b44:	eef0 8a61 	vmov.f32	s17, s3
 8004b48:	ec55 4b10 	vmov	r4, r5, d0
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	da06      	bge.n	8004b68 <__kernel_sin+0x30>
 8004b5a:	ee10 0a10 	vmov	r0, s0
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb ff8c 	bl	8000a7c <__aeabi_d2iz>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d051      	beq.n	8004c0c <__kernel_sin+0xd4>
 8004b68:	4622      	mov	r2, r4
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7fb fcea 	bl	8000548 <__aeabi_dmul>
 8004b74:	4682      	mov	sl, r0
 8004b76:	468b      	mov	fp, r1
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7fb fce2 	bl	8000548 <__aeabi_dmul>
 8004b84:	a341      	add	r3, pc, #260	; (adr r3, 8004c8c <__kernel_sin+0x154>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	4689      	mov	r9, r1
 8004b8e:	4650      	mov	r0, sl
 8004b90:	4659      	mov	r1, fp
 8004b92:	f7fb fcd9 	bl	8000548 <__aeabi_dmul>
 8004b96:	a33f      	add	r3, pc, #252	; (adr r3, 8004c94 <__kernel_sin+0x15c>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fb1c 	bl	80001d8 <__aeabi_dsub>
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	465b      	mov	r3, fp
 8004ba4:	f7fb fcd0 	bl	8000548 <__aeabi_dmul>
 8004ba8:	a33c      	add	r3, pc, #240	; (adr r3, 8004c9c <__kernel_sin+0x164>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fb15 	bl	80001dc <__adddf3>
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	465b      	mov	r3, fp
 8004bb6:	f7fb fcc7 	bl	8000548 <__aeabi_dmul>
 8004bba:	a33a      	add	r3, pc, #232	; (adr r3, 8004ca4 <__kernel_sin+0x16c>)
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f7fb fb0a 	bl	80001d8 <__aeabi_dsub>
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	465b      	mov	r3, fp
 8004bc8:	f7fb fcbe 	bl	8000548 <__aeabi_dmul>
 8004bcc:	a337      	add	r3, pc, #220	; (adr r3, 8004cac <__kernel_sin+0x174>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb fb03 	bl	80001dc <__adddf3>
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	b9eb      	cbnz	r3, 8004c1a <__kernel_sin+0xe2>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4650      	mov	r0, sl
 8004be4:	4659      	mov	r1, fp
 8004be6:	f7fb fcaf 	bl	8000548 <__aeabi_dmul>
 8004bea:	a325      	add	r3, pc, #148	; (adr r3, 8004c80 <__kernel_sin+0x148>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb faf2 	bl	80001d8 <__aeabi_dsub>
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	f7fb fca6 	bl	8000548 <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb faea 	bl	80001dc <__adddf3>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	ec45 4b10 	vmov	d0, r4, r5
 8004c10:	b003      	add	sp, #12
 8004c12:	ecbd 8b04 	vpop	{d8-d9}
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <__kernel_sin+0x150>)
 8004c1c:	ec51 0b18 	vmov	r0, r1, d8
 8004c20:	2200      	movs	r2, #0
 8004c22:	f7fb fc91 	bl	8000548 <__aeabi_dmul>
 8004c26:	4632      	mov	r2, r6
 8004c28:	ec41 0b19 	vmov	d9, r0, r1
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	f7fb fc89 	bl	8000548 <__aeabi_dmul>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	ec51 0b19 	vmov	r0, r1, d9
 8004c3e:	f7fb facb 	bl	80001d8 <__aeabi_dsub>
 8004c42:	4652      	mov	r2, sl
 8004c44:	465b      	mov	r3, fp
 8004c46:	f7fb fc7f 	bl	8000548 <__aeabi_dmul>
 8004c4a:	ec53 2b18 	vmov	r2, r3, d8
 8004c4e:	f7fb fac3 	bl	80001d8 <__aeabi_dsub>
 8004c52:	a30b      	add	r3, pc, #44	; (adr r3, 8004c80 <__kernel_sin+0x148>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	4606      	mov	r6, r0
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb fc72 	bl	8000548 <__aeabi_dmul>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fab6 	bl	80001dc <__adddf3>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb faae 	bl	80001d8 <__aeabi_dsub>
 8004c7c:	e7c4      	b.n	8004c08 <__kernel_sin+0xd0>
 8004c7e:	bf00      	nop
 8004c80:	55555549 	.word	0x55555549
 8004c84:	3fc55555 	.word	0x3fc55555
 8004c88:	3fe00000 	.word	0x3fe00000
 8004c8c:	5acfd57c 	.word	0x5acfd57c
 8004c90:	3de5d93a 	.word	0x3de5d93a
 8004c94:	8a2b9ceb 	.word	0x8a2b9ceb
 8004c98:	3e5ae5e6 	.word	0x3e5ae5e6
 8004c9c:	57b1fe7d 	.word	0x57b1fe7d
 8004ca0:	3ec71de3 	.word	0x3ec71de3
 8004ca4:	19c161d5 	.word	0x19c161d5
 8004ca8:	3f2a01a0 	.word	0x3f2a01a0
 8004cac:	1110f8a6 	.word	0x1110f8a6
 8004cb0:	3f811111 	.word	0x3f811111
 8004cb4:	00000000 	.word	0x00000000

08004cb8 <__ieee754_rem_pio2>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	ed2d 8b02 	vpush	{d8}
 8004cc0:	ec55 4b10 	vmov	r4, r5, d0
 8004cc4:	4bca      	ldr	r3, [pc, #808]	; (8004ff0 <__ieee754_rem_pio2+0x338>)
 8004cc6:	b08b      	sub	sp, #44	; 0x2c
 8004cc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004ccc:	4598      	cmp	r8, r3
 8004cce:	4682      	mov	sl, r0
 8004cd0:	9502      	str	r5, [sp, #8]
 8004cd2:	dc08      	bgt.n	8004ce6 <__ieee754_rem_pio2+0x2e>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	ed80 0b00 	vstr	d0, [r0]
 8004cdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ce0:	f04f 0b00 	mov.w	fp, #0
 8004ce4:	e028      	b.n	8004d38 <__ieee754_rem_pio2+0x80>
 8004ce6:	4bc3      	ldr	r3, [pc, #780]	; (8004ff4 <__ieee754_rem_pio2+0x33c>)
 8004ce8:	4598      	cmp	r8, r3
 8004cea:	dc78      	bgt.n	8004dde <__ieee754_rem_pio2+0x126>
 8004cec:	9b02      	ldr	r3, [sp, #8]
 8004cee:	4ec2      	ldr	r6, [pc, #776]	; (8004ff8 <__ieee754_rem_pio2+0x340>)
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	ee10 0a10 	vmov	r0, s0
 8004cf6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004fb8 <__ieee754_rem_pio2+0x300>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	dd39      	ble.n	8004d74 <__ieee754_rem_pio2+0xbc>
 8004d00:	f7fb fa6a 	bl	80001d8 <__aeabi_dsub>
 8004d04:	45b0      	cmp	r8, r6
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	d01b      	beq.n	8004d44 <__ieee754_rem_pio2+0x8c>
 8004d0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004fc0 <__ieee754_rem_pio2+0x308>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fa61 	bl	80001d8 <__aeabi_dsub>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	e9ca 2300 	strd	r2, r3, [sl]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	f7fb fa59 	bl	80001d8 <__aeabi_dsub>
 8004d26:	a3a6      	add	r3, pc, #664	; (adr r3, 8004fc0 <__ieee754_rem_pio2+0x308>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fa54 	bl	80001d8 <__aeabi_dsub>
 8004d30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d34:	f04f 0b01 	mov.w	fp, #1
 8004d38:	4658      	mov	r0, fp
 8004d3a:	b00b      	add	sp, #44	; 0x2c
 8004d3c:	ecbd 8b02 	vpop	{d8}
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	a3a0      	add	r3, pc, #640	; (adr r3, 8004fc8 <__ieee754_rem_pio2+0x310>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fa45 	bl	80001d8 <__aeabi_dsub>
 8004d4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x318>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	4604      	mov	r4, r0
 8004d56:	460d      	mov	r5, r1
 8004d58:	f7fb fa3e 	bl	80001d8 <__aeabi_dsub>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	e9ca 2300 	strd	r2, r3, [sl]
 8004d64:	4620      	mov	r0, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	f7fb fa36 	bl	80001d8 <__aeabi_dsub>
 8004d6c:	a398      	add	r3, pc, #608	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x318>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	e7db      	b.n	8004d2c <__ieee754_rem_pio2+0x74>
 8004d74:	f7fb fa32 	bl	80001dc <__adddf3>
 8004d78:	45b0      	cmp	r8, r6
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	d016      	beq.n	8004dae <__ieee754_rem_pio2+0xf6>
 8004d80:	a38f      	add	r3, pc, #572	; (adr r3, 8004fc0 <__ieee754_rem_pio2+0x308>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa29 	bl	80001dc <__adddf3>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	e9ca 2300 	strd	r2, r3, [sl]
 8004d92:	4620      	mov	r0, r4
 8004d94:	4629      	mov	r1, r5
 8004d96:	f7fb fa1f 	bl	80001d8 <__aeabi_dsub>
 8004d9a:	a389      	add	r3, pc, #548	; (adr r3, 8004fc0 <__ieee754_rem_pio2+0x308>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fa1c 	bl	80001dc <__adddf3>
 8004da4:	f04f 3bff 	mov.w	fp, #4294967295
 8004da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dac:	e7c4      	b.n	8004d38 <__ieee754_rem_pio2+0x80>
 8004dae:	a386      	add	r3, pc, #536	; (adr r3, 8004fc8 <__ieee754_rem_pio2+0x310>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb fa12 	bl	80001dc <__adddf3>
 8004db8:	a385      	add	r3, pc, #532	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x318>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	460d      	mov	r5, r1
 8004dc2:	f7fb fa0b 	bl	80001dc <__adddf3>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	e9ca 2300 	strd	r2, r3, [sl]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fa01 	bl	80001d8 <__aeabi_dsub>
 8004dd6:	a37e      	add	r3, pc, #504	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x318>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	e7e0      	b.n	8004da0 <__ieee754_rem_pio2+0xe8>
 8004dde:	4b87      	ldr	r3, [pc, #540]	; (8004ffc <__ieee754_rem_pio2+0x344>)
 8004de0:	4598      	cmp	r8, r3
 8004de2:	f300 80d8 	bgt.w	8004f96 <__ieee754_rem_pio2+0x2de>
 8004de6:	f000 f96d 	bl	80050c4 <fabs>
 8004dea:	ec55 4b10 	vmov	r4, r5, d0
 8004dee:	ee10 0a10 	vmov	r0, s0
 8004df2:	a379      	add	r3, pc, #484	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x320>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb fba5 	bl	8000548 <__aeabi_dmul>
 8004dfe:	4b80      	ldr	r3, [pc, #512]	; (8005000 <__ieee754_rem_pio2+0x348>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	f7fb f9eb 	bl	80001dc <__adddf3>
 8004e06:	f7fb fe39 	bl	8000a7c <__aeabi_d2iz>
 8004e0a:	4683      	mov	fp, r0
 8004e0c:	f7fb fb32 	bl	8000474 <__aeabi_i2d>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	ec43 2b18 	vmov	d8, r2, r3
 8004e18:	a367      	add	r3, pc, #412	; (adr r3, 8004fb8 <__ieee754_rem_pio2+0x300>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb fb93 	bl	8000548 <__aeabi_dmul>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7fb f9d5 	bl	80001d8 <__aeabi_dsub>
 8004e2e:	a364      	add	r3, pc, #400	; (adr r3, 8004fc0 <__ieee754_rem_pio2+0x308>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	ec51 0b18 	vmov	r0, r1, d8
 8004e3c:	f7fb fb84 	bl	8000548 <__aeabi_dmul>
 8004e40:	f1bb 0f1f 	cmp.w	fp, #31
 8004e44:	4604      	mov	r4, r0
 8004e46:	460d      	mov	r5, r1
 8004e48:	dc0d      	bgt.n	8004e66 <__ieee754_rem_pio2+0x1ae>
 8004e4a:	4b6e      	ldr	r3, [pc, #440]	; (8005004 <__ieee754_rem_pio2+0x34c>)
 8004e4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	4543      	cmp	r3, r8
 8004e56:	d006      	beq.n	8004e66 <__ieee754_rem_pio2+0x1ae>
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb f9ba 	bl	80001d8 <__aeabi_dsub>
 8004e64:	e00e      	b.n	8004e84 <__ieee754_rem_pio2+0x1cc>
 8004e66:	462b      	mov	r3, r5
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	f7fb f9b3 	bl	80001d8 <__aeabi_dsub>
 8004e72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e76:	9303      	str	r3, [sp, #12]
 8004e78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e7c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	dc02      	bgt.n	8004e8a <__ieee754_rem_pio2+0x1d2>
 8004e84:	e9ca 0100 	strd	r0, r1, [sl]
 8004e88:	e039      	b.n	8004efe <__ieee754_rem_pio2+0x246>
 8004e8a:	a34f      	add	r3, pc, #316	; (adr r3, 8004fc8 <__ieee754_rem_pio2+0x310>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	ec51 0b18 	vmov	r0, r1, d8
 8004e94:	f7fb fb58 	bl	8000548 <__aeabi_dmul>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb f998 	bl	80001d8 <__aeabi_dsub>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4680      	mov	r8, r0
 8004eae:	4689      	mov	r9, r1
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb f990 	bl	80001d8 <__aeabi_dsub>
 8004eb8:	4622      	mov	r2, r4
 8004eba:	462b      	mov	r3, r5
 8004ebc:	f7fb f98c 	bl	80001d8 <__aeabi_dsub>
 8004ec0:	a343      	add	r3, pc, #268	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x318>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	460d      	mov	r5, r1
 8004eca:	ec51 0b18 	vmov	r0, r1, d8
 8004ece:	f7fb fb3b 	bl	8000548 <__aeabi_dmul>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	f7fb f97f 	bl	80001d8 <__aeabi_dsub>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4604      	mov	r4, r0
 8004ee0:	460d      	mov	r5, r1
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb f977 	bl	80001d8 <__aeabi_dsub>
 8004eea:	9a03      	ldr	r2, [sp, #12]
 8004eec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b31      	cmp	r3, #49	; 0x31
 8004ef4:	dc24      	bgt.n	8004f40 <__ieee754_rem_pio2+0x288>
 8004ef6:	e9ca 0100 	strd	r0, r1, [sl]
 8004efa:	4646      	mov	r6, r8
 8004efc:	464f      	mov	r7, r9
 8004efe:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f02:	4630      	mov	r0, r6
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb f965 	bl	80001d8 <__aeabi_dsub>
 8004f0e:	462b      	mov	r3, r5
 8004f10:	4622      	mov	r2, r4
 8004f12:	f7fb f961 	bl	80001d8 <__aeabi_dsub>
 8004f16:	9b02      	ldr	r3, [sp, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f1e:	f6bf af0b 	bge.w	8004d38 <__ieee754_rem_pio2+0x80>
 8004f22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f26:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f2e:	f8ca 8000 	str.w	r8, [sl]
 8004f32:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f36:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f3a:	f1cb 0b00 	rsb	fp, fp, #0
 8004f3e:	e6fb      	b.n	8004d38 <__ieee754_rem_pio2+0x80>
 8004f40:	a327      	add	r3, pc, #156	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x328>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	ec51 0b18 	vmov	r0, r1, d8
 8004f4a:	f7fb fafd 	bl	8000548 <__aeabi_dmul>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb f93d 	bl	80001d8 <__aeabi_dsub>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4606      	mov	r6, r0
 8004f64:	460f      	mov	r7, r1
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f935 	bl	80001d8 <__aeabi_dsub>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f7fb f931 	bl	80001d8 <__aeabi_dsub>
 8004f76:	a31c      	add	r3, pc, #112	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x330>)
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	460d      	mov	r5, r1
 8004f80:	ec51 0b18 	vmov	r0, r1, d8
 8004f84:	f7fb fae0 	bl	8000548 <__aeabi_dmul>
 8004f88:	4622      	mov	r2, r4
 8004f8a:	462b      	mov	r3, r5
 8004f8c:	f7fb f924 	bl	80001d8 <__aeabi_dsub>
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	e760      	b.n	8004e58 <__ieee754_rem_pio2+0x1a0>
 8004f96:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <__ieee754_rem_pio2+0x350>)
 8004f98:	4598      	cmp	r8, r3
 8004f9a:	dd37      	ble.n	800500c <__ieee754_rem_pio2+0x354>
 8004f9c:	ee10 2a10 	vmov	r2, s0
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7fb f917 	bl	80001d8 <__aeabi_dsub>
 8004faa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fae:	e9ca 0100 	strd	r0, r1, [sl]
 8004fb2:	e695      	b.n	8004ce0 <__ieee754_rem_pio2+0x28>
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	54400000 	.word	0x54400000
 8004fbc:	3ff921fb 	.word	0x3ff921fb
 8004fc0:	1a626331 	.word	0x1a626331
 8004fc4:	3dd0b461 	.word	0x3dd0b461
 8004fc8:	1a600000 	.word	0x1a600000
 8004fcc:	3dd0b461 	.word	0x3dd0b461
 8004fd0:	2e037073 	.word	0x2e037073
 8004fd4:	3ba3198a 	.word	0x3ba3198a
 8004fd8:	6dc9c883 	.word	0x6dc9c883
 8004fdc:	3fe45f30 	.word	0x3fe45f30
 8004fe0:	2e000000 	.word	0x2e000000
 8004fe4:	3ba3198a 	.word	0x3ba3198a
 8004fe8:	252049c1 	.word	0x252049c1
 8004fec:	397b839a 	.word	0x397b839a
 8004ff0:	3fe921fb 	.word	0x3fe921fb
 8004ff4:	4002d97b 	.word	0x4002d97b
 8004ff8:	3ff921fb 	.word	0x3ff921fb
 8004ffc:	413921fb 	.word	0x413921fb
 8005000:	3fe00000 	.word	0x3fe00000
 8005004:	080059d8 	.word	0x080059d8
 8005008:	7fefffff 	.word	0x7fefffff
 800500c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005010:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005014:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005018:	4620      	mov	r0, r4
 800501a:	460d      	mov	r5, r1
 800501c:	f7fb fd2e 	bl	8000a7c <__aeabi_d2iz>
 8005020:	f7fb fa28 	bl	8000474 <__aeabi_i2d>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005030:	f7fb f8d2 	bl	80001d8 <__aeabi_dsub>
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <__ieee754_rem_pio2+0x404>)
 8005036:	2200      	movs	r2, #0
 8005038:	f7fb fa86 	bl	8000548 <__aeabi_dmul>
 800503c:	460d      	mov	r5, r1
 800503e:	4604      	mov	r4, r0
 8005040:	f7fb fd1c 	bl	8000a7c <__aeabi_d2iz>
 8005044:	f7fb fa16 	bl	8000474 <__aeabi_i2d>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005054:	f7fb f8c0 	bl	80001d8 <__aeabi_dsub>
 8005058:	4b18      	ldr	r3, [pc, #96]	; (80050bc <__ieee754_rem_pio2+0x404>)
 800505a:	2200      	movs	r2, #0
 800505c:	f7fb fa74 	bl	8000548 <__aeabi_dmul>
 8005060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005064:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005068:	2703      	movs	r7, #3
 800506a:	2400      	movs	r4, #0
 800506c:	2500      	movs	r5, #0
 800506e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005072:	4622      	mov	r2, r4
 8005074:	462b      	mov	r3, r5
 8005076:	46b9      	mov	r9, r7
 8005078:	3f01      	subs	r7, #1
 800507a:	f7fb fccd 	bl	8000a18 <__aeabi_dcmpeq>
 800507e:	2800      	cmp	r0, #0
 8005080:	d1f5      	bne.n	800506e <__ieee754_rem_pio2+0x3b6>
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <__ieee754_rem_pio2+0x408>)
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	2302      	movs	r3, #2
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4632      	mov	r2, r6
 800508c:	464b      	mov	r3, r9
 800508e:	4651      	mov	r1, sl
 8005090:	a804      	add	r0, sp, #16
 8005092:	f000 f821 	bl	80050d8 <__kernel_rem_pio2>
 8005096:	9b02      	ldr	r3, [sp, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	4683      	mov	fp, r0
 800509c:	f6bf ae4c 	bge.w	8004d38 <__ieee754_rem_pio2+0x80>
 80050a0:	e9da 2100 	ldrd	r2, r1, [sl]
 80050a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050a8:	e9ca 2300 	strd	r2, r3, [sl]
 80050ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80050b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80050b8:	e73f      	b.n	8004f3a <__ieee754_rem_pio2+0x282>
 80050ba:	bf00      	nop
 80050bc:	41700000 	.word	0x41700000
 80050c0:	08005a58 	.word	0x08005a58

080050c4 <fabs>:
 80050c4:	ec51 0b10 	vmov	r0, r1, d0
 80050c8:	ee10 2a10 	vmov	r2, s0
 80050cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050d0:	ec43 2b10 	vmov	d0, r2, r3
 80050d4:	4770      	bx	lr
	...

080050d8 <__kernel_rem_pio2>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ed2d 8b02 	vpush	{d8}
 80050e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80050e4:	f112 0f14 	cmn.w	r2, #20
 80050e8:	9306      	str	r3, [sp, #24]
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	4bc2      	ldr	r3, [pc, #776]	; (80053f8 <__kernel_rem_pio2+0x320>)
 80050ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80050f0:	9009      	str	r0, [sp, #36]	; 0x24
 80050f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	9b06      	ldr	r3, [sp, #24]
 80050fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80050fe:	bfa8      	it	ge
 8005100:	1ed4      	subge	r4, r2, #3
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	bfb2      	itee	lt
 8005106:	2400      	movlt	r4, #0
 8005108:	2318      	movge	r3, #24
 800510a:	fb94 f4f3 	sdivge	r4, r4, r3
 800510e:	f06f 0317 	mvn.w	r3, #23
 8005112:	fb04 3303 	mla	r3, r4, r3, r3
 8005116:	eb03 0a02 	add.w	sl, r3, r2
 800511a:	9b00      	ldr	r3, [sp, #0]
 800511c:	9a05      	ldr	r2, [sp, #20]
 800511e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80053e8 <__kernel_rem_pio2+0x310>
 8005122:	eb03 0802 	add.w	r8, r3, r2
 8005126:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005128:	1aa7      	subs	r7, r4, r2
 800512a:	ae20      	add	r6, sp, #128	; 0x80
 800512c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005130:	2500      	movs	r5, #0
 8005132:	4545      	cmp	r5, r8
 8005134:	dd13      	ble.n	800515e <__kernel_rem_pio2+0x86>
 8005136:	9b06      	ldr	r3, [sp, #24]
 8005138:	aa20      	add	r2, sp, #128	; 0x80
 800513a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800513e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005142:	f04f 0800 	mov.w	r8, #0
 8005146:	9b00      	ldr	r3, [sp, #0]
 8005148:	4598      	cmp	r8, r3
 800514a:	dc31      	bgt.n	80051b0 <__kernel_rem_pio2+0xd8>
 800514c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80053e8 <__kernel_rem_pio2+0x310>
 8005150:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005158:	462f      	mov	r7, r5
 800515a:	2600      	movs	r6, #0
 800515c:	e01b      	b.n	8005196 <__kernel_rem_pio2+0xbe>
 800515e:	42ef      	cmn	r7, r5
 8005160:	d407      	bmi.n	8005172 <__kernel_rem_pio2+0x9a>
 8005162:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005166:	f7fb f985 	bl	8000474 <__aeabi_i2d>
 800516a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800516e:	3501      	adds	r5, #1
 8005170:	e7df      	b.n	8005132 <__kernel_rem_pio2+0x5a>
 8005172:	ec51 0b18 	vmov	r0, r1, d8
 8005176:	e7f8      	b.n	800516a <__kernel_rem_pio2+0x92>
 8005178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005180:	f7fb f9e2 	bl	8000548 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518c:	f7fb f826 	bl	80001dc <__adddf3>
 8005190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005194:	3601      	adds	r6, #1
 8005196:	9b05      	ldr	r3, [sp, #20]
 8005198:	429e      	cmp	r6, r3
 800519a:	f1a7 0708 	sub.w	r7, r7, #8
 800519e:	ddeb      	ble.n	8005178 <__kernel_rem_pio2+0xa0>
 80051a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051a4:	f108 0801 	add.w	r8, r8, #1
 80051a8:	ecab 7b02 	vstmia	fp!, {d7}
 80051ac:	3508      	adds	r5, #8
 80051ae:	e7ca      	b.n	8005146 <__kernel_rem_pio2+0x6e>
 80051b0:	9b00      	ldr	r3, [sp, #0]
 80051b2:	aa0c      	add	r2, sp, #48	; 0x30
 80051b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80051bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051c0:	9c00      	ldr	r4, [sp, #0]
 80051c2:	930a      	str	r3, [sp, #40]	; 0x28
 80051c4:	00e3      	lsls	r3, r4, #3
 80051c6:	9308      	str	r3, [sp, #32]
 80051c8:	ab98      	add	r3, sp, #608	; 0x260
 80051ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80051d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80051d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80051d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80051dc:	46c3      	mov	fp, r8
 80051de:	46a1      	mov	r9, r4
 80051e0:	f1b9 0f00 	cmp.w	r9, #0
 80051e4:	f1a5 0508 	sub.w	r5, r5, #8
 80051e8:	dc77      	bgt.n	80052da <__kernel_rem_pio2+0x202>
 80051ea:	ec47 6b10 	vmov	d0, r6, r7
 80051ee:	4650      	mov	r0, sl
 80051f0:	f000 fac2 	bl	8005778 <scalbn>
 80051f4:	ec57 6b10 	vmov	r6, r7, d0
 80051f8:	2200      	movs	r2, #0
 80051fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80051fe:	ee10 0a10 	vmov	r0, s0
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb f9a0 	bl	8000548 <__aeabi_dmul>
 8005208:	ec41 0b10 	vmov	d0, r0, r1
 800520c:	f000 fb34 	bl	8005878 <floor>
 8005210:	4b7a      	ldr	r3, [pc, #488]	; (80053fc <__kernel_rem_pio2+0x324>)
 8005212:	ec51 0b10 	vmov	r0, r1, d0
 8005216:	2200      	movs	r2, #0
 8005218:	f7fb f996 	bl	8000548 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fa ffd8 	bl	80001d8 <__aeabi_dsub>
 8005228:	460f      	mov	r7, r1
 800522a:	4606      	mov	r6, r0
 800522c:	f7fb fc26 	bl	8000a7c <__aeabi_d2iz>
 8005230:	9002      	str	r0, [sp, #8]
 8005232:	f7fb f91f 	bl	8000474 <__aeabi_i2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fa ffcb 	bl	80001d8 <__aeabi_dsub>
 8005242:	f1ba 0f00 	cmp.w	sl, #0
 8005246:	4606      	mov	r6, r0
 8005248:	460f      	mov	r7, r1
 800524a:	dd6d      	ble.n	8005328 <__kernel_rem_pio2+0x250>
 800524c:	1e61      	subs	r1, r4, #1
 800524e:	ab0c      	add	r3, sp, #48	; 0x30
 8005250:	9d02      	ldr	r5, [sp, #8]
 8005252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005256:	f1ca 0018 	rsb	r0, sl, #24
 800525a:	fa43 f200 	asr.w	r2, r3, r0
 800525e:	4415      	add	r5, r2
 8005260:	4082      	lsls	r2, r0
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	aa0c      	add	r2, sp, #48	; 0x30
 8005266:	9502      	str	r5, [sp, #8]
 8005268:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800526c:	f1ca 0217 	rsb	r2, sl, #23
 8005270:	fa43 fb02 	asr.w	fp, r3, r2
 8005274:	f1bb 0f00 	cmp.w	fp, #0
 8005278:	dd65      	ble.n	8005346 <__kernel_rem_pio2+0x26e>
 800527a:	9b02      	ldr	r3, [sp, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	3301      	adds	r3, #1
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	4615      	mov	r5, r2
 8005284:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005288:	4294      	cmp	r4, r2
 800528a:	f300 809f 	bgt.w	80053cc <__kernel_rem_pio2+0x2f4>
 800528e:	f1ba 0f00 	cmp.w	sl, #0
 8005292:	dd07      	ble.n	80052a4 <__kernel_rem_pio2+0x1cc>
 8005294:	f1ba 0f01 	cmp.w	sl, #1
 8005298:	f000 80c1 	beq.w	800541e <__kernel_rem_pio2+0x346>
 800529c:	f1ba 0f02 	cmp.w	sl, #2
 80052a0:	f000 80c7 	beq.w	8005432 <__kernel_rem_pio2+0x35a>
 80052a4:	f1bb 0f02 	cmp.w	fp, #2
 80052a8:	d14d      	bne.n	8005346 <__kernel_rem_pio2+0x26e>
 80052aa:	4632      	mov	r2, r6
 80052ac:	463b      	mov	r3, r7
 80052ae:	4954      	ldr	r1, [pc, #336]	; (8005400 <__kernel_rem_pio2+0x328>)
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fa ff91 	bl	80001d8 <__aeabi_dsub>
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	d043      	beq.n	8005346 <__kernel_rem_pio2+0x26e>
 80052be:	4650      	mov	r0, sl
 80052c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80053f0 <__kernel_rem_pio2+0x318>
 80052c4:	f000 fa58 	bl	8005778 <scalbn>
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	ec53 2b10 	vmov	r2, r3, d0
 80052d0:	f7fa ff82 	bl	80001d8 <__aeabi_dsub>
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	e035      	b.n	8005346 <__kernel_rem_pio2+0x26e>
 80052da:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <__kernel_rem_pio2+0x32c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	4630      	mov	r0, r6
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fb f931 	bl	8000548 <__aeabi_dmul>
 80052e6:	f7fb fbc9 	bl	8000a7c <__aeabi_d2iz>
 80052ea:	f7fb f8c3 	bl	8000474 <__aeabi_i2d>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ec43 2b18 	vmov	d8, r2, r3
 80052f6:	4b44      	ldr	r3, [pc, #272]	; (8005408 <__kernel_rem_pio2+0x330>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fb f925 	bl	8000548 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fa ff67 	bl	80001d8 <__aeabi_dsub>
 800530a:	f7fb fbb7 	bl	8000a7c <__aeabi_d2iz>
 800530e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005312:	f84b 0b04 	str.w	r0, [fp], #4
 8005316:	ec51 0b18 	vmov	r0, r1, d8
 800531a:	f7fa ff5f 	bl	80001dc <__adddf3>
 800531e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005322:	4606      	mov	r6, r0
 8005324:	460f      	mov	r7, r1
 8005326:	e75b      	b.n	80051e0 <__kernel_rem_pio2+0x108>
 8005328:	d106      	bne.n	8005338 <__kernel_rem_pio2+0x260>
 800532a:	1e63      	subs	r3, r4, #1
 800532c:	aa0c      	add	r2, sp, #48	; 0x30
 800532e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005332:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005336:	e79d      	b.n	8005274 <__kernel_rem_pio2+0x19c>
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <__kernel_rem_pio2+0x334>)
 800533a:	2200      	movs	r2, #0
 800533c:	f7fb fb8a 	bl	8000a54 <__aeabi_dcmpge>
 8005340:	2800      	cmp	r0, #0
 8005342:	d140      	bne.n	80053c6 <__kernel_rem_pio2+0x2ee>
 8005344:	4683      	mov	fp, r0
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4630      	mov	r0, r6
 800534c:	4639      	mov	r1, r7
 800534e:	f7fb fb63 	bl	8000a18 <__aeabi_dcmpeq>
 8005352:	2800      	cmp	r0, #0
 8005354:	f000 80c1 	beq.w	80054da <__kernel_rem_pio2+0x402>
 8005358:	1e65      	subs	r5, r4, #1
 800535a:	462b      	mov	r3, r5
 800535c:	2200      	movs	r2, #0
 800535e:	9900      	ldr	r1, [sp, #0]
 8005360:	428b      	cmp	r3, r1
 8005362:	da6d      	bge.n	8005440 <__kernel_rem_pio2+0x368>
 8005364:	2a00      	cmp	r2, #0
 8005366:	f000 808a 	beq.w	800547e <__kernel_rem_pio2+0x3a6>
 800536a:	ab0c      	add	r3, sp, #48	; 0x30
 800536c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005370:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80ae 	beq.w	80054d6 <__kernel_rem_pio2+0x3fe>
 800537a:	4650      	mov	r0, sl
 800537c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80053f0 <__kernel_rem_pio2+0x318>
 8005380:	f000 f9fa 	bl	8005778 <scalbn>
 8005384:	1c6b      	adds	r3, r5, #1
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	9205      	str	r2, [sp, #20]
 800538a:	ec57 6b10 	vmov	r6, r7, d0
 800538e:	aa70      	add	r2, sp, #448	; 0x1c0
 8005390:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005404 <__kernel_rem_pio2+0x32c>
 8005394:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005398:	462c      	mov	r4, r5
 800539a:	f04f 0800 	mov.w	r8, #0
 800539e:	2c00      	cmp	r4, #0
 80053a0:	f280 80d4 	bge.w	800554c <__kernel_rem_pio2+0x474>
 80053a4:	462c      	mov	r4, r5
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	f2c0 8102 	blt.w	80055b0 <__kernel_rem_pio2+0x4d8>
 80053ac:	4b18      	ldr	r3, [pc, #96]	; (8005410 <__kernel_rem_pio2+0x338>)
 80053ae:	461e      	mov	r6, r3
 80053b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80053b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80053b6:	1b2b      	subs	r3, r5, r4
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	f04f 0a00 	mov.w	sl, #0
 80053c0:	2700      	movs	r7, #0
 80053c2:	9306      	str	r3, [sp, #24]
 80053c4:	e0e6      	b.n	8005594 <__kernel_rem_pio2+0x4bc>
 80053c6:	f04f 0b02 	mov.w	fp, #2
 80053ca:	e756      	b.n	800527a <__kernel_rem_pio2+0x1a2>
 80053cc:	f8d8 3000 	ldr.w	r3, [r8]
 80053d0:	bb05      	cbnz	r5, 8005414 <__kernel_rem_pio2+0x33c>
 80053d2:	b123      	cbz	r3, 80053de <__kernel_rem_pio2+0x306>
 80053d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80053d8:	f8c8 3000 	str.w	r3, [r8]
 80053dc:	2301      	movs	r3, #1
 80053de:	3201      	adds	r2, #1
 80053e0:	f108 0804 	add.w	r8, r8, #4
 80053e4:	461d      	mov	r5, r3
 80053e6:	e74f      	b.n	8005288 <__kernel_rem_pio2+0x1b0>
	...
 80053f4:	3ff00000 	.word	0x3ff00000
 80053f8:	08005ba0 	.word	0x08005ba0
 80053fc:	40200000 	.word	0x40200000
 8005400:	3ff00000 	.word	0x3ff00000
 8005404:	3e700000 	.word	0x3e700000
 8005408:	41700000 	.word	0x41700000
 800540c:	3fe00000 	.word	0x3fe00000
 8005410:	08005b60 	.word	0x08005b60
 8005414:	1acb      	subs	r3, r1, r3
 8005416:	f8c8 3000 	str.w	r3, [r8]
 800541a:	462b      	mov	r3, r5
 800541c:	e7df      	b.n	80053de <__kernel_rem_pio2+0x306>
 800541e:	1e62      	subs	r2, r4, #1
 8005420:	ab0c      	add	r3, sp, #48	; 0x30
 8005422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800542a:	a90c      	add	r1, sp, #48	; 0x30
 800542c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005430:	e738      	b.n	80052a4 <__kernel_rem_pio2+0x1cc>
 8005432:	1e62      	subs	r2, r4, #1
 8005434:	ab0c      	add	r3, sp, #48	; 0x30
 8005436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800543e:	e7f4      	b.n	800542a <__kernel_rem_pio2+0x352>
 8005440:	a90c      	add	r1, sp, #48	; 0x30
 8005442:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005446:	3b01      	subs	r3, #1
 8005448:	430a      	orrs	r2, r1
 800544a:	e788      	b.n	800535e <__kernel_rem_pio2+0x286>
 800544c:	3301      	adds	r3, #1
 800544e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005452:	2900      	cmp	r1, #0
 8005454:	d0fa      	beq.n	800544c <__kernel_rem_pio2+0x374>
 8005456:	9a08      	ldr	r2, [sp, #32]
 8005458:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800545c:	446a      	add	r2, sp
 800545e:	3a98      	subs	r2, #152	; 0x98
 8005460:	9208      	str	r2, [sp, #32]
 8005462:	9a06      	ldr	r2, [sp, #24]
 8005464:	a920      	add	r1, sp, #128	; 0x80
 8005466:	18a2      	adds	r2, r4, r2
 8005468:	18e3      	adds	r3, r4, r3
 800546a:	f104 0801 	add.w	r8, r4, #1
 800546e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005472:	9302      	str	r3, [sp, #8]
 8005474:	9b02      	ldr	r3, [sp, #8]
 8005476:	4543      	cmp	r3, r8
 8005478:	da04      	bge.n	8005484 <__kernel_rem_pio2+0x3ac>
 800547a:	461c      	mov	r4, r3
 800547c:	e6a2      	b.n	80051c4 <__kernel_rem_pio2+0xec>
 800547e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005480:	2301      	movs	r3, #1
 8005482:	e7e4      	b.n	800544e <__kernel_rem_pio2+0x376>
 8005484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005486:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800548a:	f7fa fff3 	bl	8000474 <__aeabi_i2d>
 800548e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005494:	46ab      	mov	fp, r5
 8005496:	461c      	mov	r4, r3
 8005498:	f04f 0900 	mov.w	r9, #0
 800549c:	2600      	movs	r6, #0
 800549e:	2700      	movs	r7, #0
 80054a0:	9b05      	ldr	r3, [sp, #20]
 80054a2:	4599      	cmp	r9, r3
 80054a4:	dd06      	ble.n	80054b4 <__kernel_rem_pio2+0x3dc>
 80054a6:	9b08      	ldr	r3, [sp, #32]
 80054a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80054ac:	f108 0801 	add.w	r8, r8, #1
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	e7df      	b.n	8005474 <__kernel_rem_pio2+0x39c>
 80054b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80054b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80054bc:	f7fb f844 	bl	8000548 <__aeabi_dmul>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fa fe88 	bl	80001dc <__adddf3>
 80054cc:	f109 0901 	add.w	r9, r9, #1
 80054d0:	4606      	mov	r6, r0
 80054d2:	460f      	mov	r7, r1
 80054d4:	e7e4      	b.n	80054a0 <__kernel_rem_pio2+0x3c8>
 80054d6:	3d01      	subs	r5, #1
 80054d8:	e747      	b.n	800536a <__kernel_rem_pio2+0x292>
 80054da:	ec47 6b10 	vmov	d0, r6, r7
 80054de:	f1ca 0000 	rsb	r0, sl, #0
 80054e2:	f000 f949 	bl	8005778 <scalbn>
 80054e6:	ec57 6b10 	vmov	r6, r7, d0
 80054ea:	4ba0      	ldr	r3, [pc, #640]	; (800576c <__kernel_rem_pio2+0x694>)
 80054ec:	ee10 0a10 	vmov	r0, s0
 80054f0:	2200      	movs	r2, #0
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb faae 	bl	8000a54 <__aeabi_dcmpge>
 80054f8:	b1f8      	cbz	r0, 800553a <__kernel_rem_pio2+0x462>
 80054fa:	4b9d      	ldr	r3, [pc, #628]	; (8005770 <__kernel_rem_pio2+0x698>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	f7fb f821 	bl	8000548 <__aeabi_dmul>
 8005506:	f7fb fab9 	bl	8000a7c <__aeabi_d2iz>
 800550a:	4680      	mov	r8, r0
 800550c:	f7fa ffb2 	bl	8000474 <__aeabi_i2d>
 8005510:	4b96      	ldr	r3, [pc, #600]	; (800576c <__kernel_rem_pio2+0x694>)
 8005512:	2200      	movs	r2, #0
 8005514:	f7fb f818 	bl	8000548 <__aeabi_dmul>
 8005518:	460b      	mov	r3, r1
 800551a:	4602      	mov	r2, r0
 800551c:	4639      	mov	r1, r7
 800551e:	4630      	mov	r0, r6
 8005520:	f7fa fe5a 	bl	80001d8 <__aeabi_dsub>
 8005524:	f7fb faaa 	bl	8000a7c <__aeabi_d2iz>
 8005528:	1c65      	adds	r5, r4, #1
 800552a:	ab0c      	add	r3, sp, #48	; 0x30
 800552c:	f10a 0a18 	add.w	sl, sl, #24
 8005530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005534:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005538:	e71f      	b.n	800537a <__kernel_rem_pio2+0x2a2>
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fb fa9d 	bl	8000a7c <__aeabi_d2iz>
 8005542:	ab0c      	add	r3, sp, #48	; 0x30
 8005544:	4625      	mov	r5, r4
 8005546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800554a:	e716      	b.n	800537a <__kernel_rem_pio2+0x2a2>
 800554c:	ab0c      	add	r3, sp, #48	; 0x30
 800554e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005552:	f7fa ff8f 	bl	8000474 <__aeabi_i2d>
 8005556:	4632      	mov	r2, r6
 8005558:	463b      	mov	r3, r7
 800555a:	f7fa fff5 	bl	8000548 <__aeabi_dmul>
 800555e:	4642      	mov	r2, r8
 8005560:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005564:	464b      	mov	r3, r9
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fa ffed 	bl	8000548 <__aeabi_dmul>
 800556e:	3c01      	subs	r4, #1
 8005570:	4606      	mov	r6, r0
 8005572:	460f      	mov	r7, r1
 8005574:	e713      	b.n	800539e <__kernel_rem_pio2+0x2c6>
 8005576:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800557a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800557e:	f7fa ffe3 	bl	8000548 <__aeabi_dmul>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4648      	mov	r0, r9
 8005588:	4651      	mov	r1, sl
 800558a:	f7fa fe27 	bl	80001dc <__adddf3>
 800558e:	3701      	adds	r7, #1
 8005590:	4681      	mov	r9, r0
 8005592:	468a      	mov	sl, r1
 8005594:	9b00      	ldr	r3, [sp, #0]
 8005596:	429f      	cmp	r7, r3
 8005598:	dc02      	bgt.n	80055a0 <__kernel_rem_pio2+0x4c8>
 800559a:	9b06      	ldr	r3, [sp, #24]
 800559c:	429f      	cmp	r7, r3
 800559e:	ddea      	ble.n	8005576 <__kernel_rem_pio2+0x49e>
 80055a0:	9a06      	ldr	r2, [sp, #24]
 80055a2:	ab48      	add	r3, sp, #288	; 0x120
 80055a4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80055a8:	e9c6 9a00 	strd	r9, sl, [r6]
 80055ac:	3c01      	subs	r4, #1
 80055ae:	e6fa      	b.n	80053a6 <__kernel_rem_pio2+0x2ce>
 80055b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	dc0b      	bgt.n	80055ce <__kernel_rem_pio2+0x4f6>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dc39      	bgt.n	800562e <__kernel_rem_pio2+0x556>
 80055ba:	d05d      	beq.n	8005678 <__kernel_rem_pio2+0x5a0>
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	f003 0007 	and.w	r0, r3, #7
 80055c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80055c6:	ecbd 8b02 	vpop	{d8}
 80055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d1f3      	bne.n	80055bc <__kernel_rem_pio2+0x4e4>
 80055d4:	9b05      	ldr	r3, [sp, #20]
 80055d6:	9500      	str	r5, [sp, #0]
 80055d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80055dc:	eb0d 0403 	add.w	r4, sp, r3
 80055e0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80055e4:	46a2      	mov	sl, r4
 80055e6:	9b00      	ldr	r3, [sp, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f1aa 0a08 	sub.w	sl, sl, #8
 80055ee:	dc69      	bgt.n	80056c4 <__kernel_rem_pio2+0x5ec>
 80055f0:	46aa      	mov	sl, r5
 80055f2:	f1ba 0f01 	cmp.w	sl, #1
 80055f6:	f1a4 0408 	sub.w	r4, r4, #8
 80055fa:	f300 8083 	bgt.w	8005704 <__kernel_rem_pio2+0x62c>
 80055fe:	9c05      	ldr	r4, [sp, #20]
 8005600:	ab48      	add	r3, sp, #288	; 0x120
 8005602:	441c      	add	r4, r3
 8005604:	2000      	movs	r0, #0
 8005606:	2100      	movs	r1, #0
 8005608:	2d01      	cmp	r5, #1
 800560a:	f300 809a 	bgt.w	8005742 <__kernel_rem_pio2+0x66a>
 800560e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005612:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005616:	f1bb 0f00 	cmp.w	fp, #0
 800561a:	f040 8098 	bne.w	800574e <__kernel_rem_pio2+0x676>
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	e9c3 7800 	strd	r7, r8, [r3]
 8005624:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005628:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800562c:	e7c6      	b.n	80055bc <__kernel_rem_pio2+0x4e4>
 800562e:	9e05      	ldr	r6, [sp, #20]
 8005630:	ab48      	add	r3, sp, #288	; 0x120
 8005632:	441e      	add	r6, r3
 8005634:	462c      	mov	r4, r5
 8005636:	2000      	movs	r0, #0
 8005638:	2100      	movs	r1, #0
 800563a:	2c00      	cmp	r4, #0
 800563c:	da33      	bge.n	80056a6 <__kernel_rem_pio2+0x5ce>
 800563e:	f1bb 0f00 	cmp.w	fp, #0
 8005642:	d036      	beq.n	80056b2 <__kernel_rem_pio2+0x5da>
 8005644:	4602      	mov	r2, r0
 8005646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800564a:	9c04      	ldr	r4, [sp, #16]
 800564c:	e9c4 2300 	strd	r2, r3, [r4]
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005658:	f7fa fdbe 	bl	80001d8 <__aeabi_dsub>
 800565c:	ae4a      	add	r6, sp, #296	; 0x128
 800565e:	2401      	movs	r4, #1
 8005660:	42a5      	cmp	r5, r4
 8005662:	da29      	bge.n	80056b8 <__kernel_rem_pio2+0x5e0>
 8005664:	f1bb 0f00 	cmp.w	fp, #0
 8005668:	d002      	beq.n	8005670 <__kernel_rem_pio2+0x598>
 800566a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800566e:	4619      	mov	r1, r3
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005676:	e7a1      	b.n	80055bc <__kernel_rem_pio2+0x4e4>
 8005678:	9c05      	ldr	r4, [sp, #20]
 800567a:	ab48      	add	r3, sp, #288	; 0x120
 800567c:	441c      	add	r4, r3
 800567e:	2000      	movs	r0, #0
 8005680:	2100      	movs	r1, #0
 8005682:	2d00      	cmp	r5, #0
 8005684:	da09      	bge.n	800569a <__kernel_rem_pio2+0x5c2>
 8005686:	f1bb 0f00 	cmp.w	fp, #0
 800568a:	d002      	beq.n	8005692 <__kernel_rem_pio2+0x5ba>
 800568c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005690:	4619      	mov	r1, r3
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	e9c3 0100 	strd	r0, r1, [r3]
 8005698:	e790      	b.n	80055bc <__kernel_rem_pio2+0x4e4>
 800569a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800569e:	f7fa fd9d 	bl	80001dc <__adddf3>
 80056a2:	3d01      	subs	r5, #1
 80056a4:	e7ed      	b.n	8005682 <__kernel_rem_pio2+0x5aa>
 80056a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80056aa:	f7fa fd97 	bl	80001dc <__adddf3>
 80056ae:	3c01      	subs	r4, #1
 80056b0:	e7c3      	b.n	800563a <__kernel_rem_pio2+0x562>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e7c8      	b.n	800564a <__kernel_rem_pio2+0x572>
 80056b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80056bc:	f7fa fd8e 	bl	80001dc <__adddf3>
 80056c0:	3401      	adds	r4, #1
 80056c2:	e7cd      	b.n	8005660 <__kernel_rem_pio2+0x588>
 80056c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80056c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	4632      	mov	r2, r6
 80056d4:	463b      	mov	r3, r7
 80056d6:	4640      	mov	r0, r8
 80056d8:	4649      	mov	r1, r9
 80056da:	f7fa fd7f 	bl	80001dc <__adddf3>
 80056de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fd75 	bl	80001d8 <__aeabi_dsub>
 80056ee:	4632      	mov	r2, r6
 80056f0:	463b      	mov	r3, r7
 80056f2:	f7fa fd73 	bl	80001dc <__adddf3>
 80056f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80056fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056fe:	ed8a 7b00 	vstr	d7, [sl]
 8005702:	e770      	b.n	80055e6 <__kernel_rem_pio2+0x50e>
 8005704:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005708:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800570c:	4640      	mov	r0, r8
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	4649      	mov	r1, r9
 8005714:	f7fa fd62 	bl	80001dc <__adddf3>
 8005718:	e9cd 0100 	strd	r0, r1, [sp]
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	f7fa fd58 	bl	80001d8 <__aeabi_dsub>
 8005728:	4632      	mov	r2, r6
 800572a:	463b      	mov	r3, r7
 800572c:	f7fa fd56 	bl	80001dc <__adddf3>
 8005730:	ed9d 7b00 	vldr	d7, [sp]
 8005734:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005738:	ed84 7b00 	vstr	d7, [r4]
 800573c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005740:	e757      	b.n	80055f2 <__kernel_rem_pio2+0x51a>
 8005742:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005746:	f7fa fd49 	bl	80001dc <__adddf3>
 800574a:	3d01      	subs	r5, #1
 800574c:	e75c      	b.n	8005608 <__kernel_rem_pio2+0x530>
 800574e:	9b04      	ldr	r3, [sp, #16]
 8005750:	9a04      	ldr	r2, [sp, #16]
 8005752:	601f      	str	r7, [r3, #0]
 8005754:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005758:	605c      	str	r4, [r3, #4]
 800575a:	609d      	str	r5, [r3, #8]
 800575c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005760:	60d3      	str	r3, [r2, #12]
 8005762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005766:	6110      	str	r0, [r2, #16]
 8005768:	6153      	str	r3, [r2, #20]
 800576a:	e727      	b.n	80055bc <__kernel_rem_pio2+0x4e4>
 800576c:	41700000 	.word	0x41700000
 8005770:	3e700000 	.word	0x3e700000
 8005774:	00000000 	.word	0x00000000

08005778 <scalbn>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	ec55 4b10 	vmov	r4, r5, d0
 800577e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005782:	4606      	mov	r6, r0
 8005784:	462b      	mov	r3, r5
 8005786:	b999      	cbnz	r1, 80057b0 <scalbn+0x38>
 8005788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800578c:	4323      	orrs	r3, r4
 800578e:	d03f      	beq.n	8005810 <scalbn+0x98>
 8005790:	4b35      	ldr	r3, [pc, #212]	; (8005868 <scalbn+0xf0>)
 8005792:	4629      	mov	r1, r5
 8005794:	ee10 0a10 	vmov	r0, s0
 8005798:	2200      	movs	r2, #0
 800579a:	f7fa fed5 	bl	8000548 <__aeabi_dmul>
 800579e:	4b33      	ldr	r3, [pc, #204]	; (800586c <scalbn+0xf4>)
 80057a0:	429e      	cmp	r6, r3
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	da10      	bge.n	80057ca <scalbn+0x52>
 80057a8:	a327      	add	r3, pc, #156	; (adr r3, 8005848 <scalbn+0xd0>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	e01f      	b.n	80057f0 <scalbn+0x78>
 80057b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80057b4:	4291      	cmp	r1, r2
 80057b6:	d10c      	bne.n	80057d2 <scalbn+0x5a>
 80057b8:	ee10 2a10 	vmov	r2, s0
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd0c 	bl	80001dc <__adddf3>
 80057c4:	4604      	mov	r4, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	e022      	b.n	8005810 <scalbn+0x98>
 80057ca:	460b      	mov	r3, r1
 80057cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80057d0:	3936      	subs	r1, #54	; 0x36
 80057d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80057d6:	4296      	cmp	r6, r2
 80057d8:	dd0d      	ble.n	80057f6 <scalbn+0x7e>
 80057da:	2d00      	cmp	r5, #0
 80057dc:	a11c      	add	r1, pc, #112	; (adr r1, 8005850 <scalbn+0xd8>)
 80057de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e2:	da02      	bge.n	80057ea <scalbn+0x72>
 80057e4:	a11c      	add	r1, pc, #112	; (adr r1, 8005858 <scalbn+0xe0>)
 80057e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ea:	a319      	add	r3, pc, #100	; (adr r3, 8005850 <scalbn+0xd8>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa feaa 	bl	8000548 <__aeabi_dmul>
 80057f4:	e7e6      	b.n	80057c4 <scalbn+0x4c>
 80057f6:	1872      	adds	r2, r6, r1
 80057f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80057fc:	428a      	cmp	r2, r1
 80057fe:	dcec      	bgt.n	80057da <scalbn+0x62>
 8005800:	2a00      	cmp	r2, #0
 8005802:	dd08      	ble.n	8005816 <scalbn+0x9e>
 8005804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800580c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005810:	ec45 4b10 	vmov	d0, r4, r5
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800581a:	da08      	bge.n	800582e <scalbn+0xb6>
 800581c:	2d00      	cmp	r5, #0
 800581e:	a10a      	add	r1, pc, #40	; (adr r1, 8005848 <scalbn+0xd0>)
 8005820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005824:	dac0      	bge.n	80057a8 <scalbn+0x30>
 8005826:	a10e      	add	r1, pc, #56	; (adr r1, 8005860 <scalbn+0xe8>)
 8005828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800582c:	e7bc      	b.n	80057a8 <scalbn+0x30>
 800582e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005832:	3236      	adds	r2, #54	; 0x36
 8005834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800583c:	4620      	mov	r0, r4
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <scalbn+0xf8>)
 8005840:	2200      	movs	r2, #0
 8005842:	e7d5      	b.n	80057f0 <scalbn+0x78>
 8005844:	f3af 8000 	nop.w
 8005848:	c2f8f359 	.word	0xc2f8f359
 800584c:	01a56e1f 	.word	0x01a56e1f
 8005850:	8800759c 	.word	0x8800759c
 8005854:	7e37e43c 	.word	0x7e37e43c
 8005858:	8800759c 	.word	0x8800759c
 800585c:	fe37e43c 	.word	0xfe37e43c
 8005860:	c2f8f359 	.word	0xc2f8f359
 8005864:	81a56e1f 	.word	0x81a56e1f
 8005868:	43500000 	.word	0x43500000
 800586c:	ffff3cb0 	.word	0xffff3cb0
 8005870:	3c900000 	.word	0x3c900000
 8005874:	00000000 	.word	0x00000000

08005878 <floor>:
 8005878:	ec51 0b10 	vmov	r0, r1, d0
 800587c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8005888:	2e13      	cmp	r6, #19
 800588a:	ee10 5a10 	vmov	r5, s0
 800588e:	ee10 8a10 	vmov	r8, s0
 8005892:	460c      	mov	r4, r1
 8005894:	dc31      	bgt.n	80058fa <floor+0x82>
 8005896:	2e00      	cmp	r6, #0
 8005898:	da14      	bge.n	80058c4 <floor+0x4c>
 800589a:	a333      	add	r3, pc, #204	; (adr r3, 8005968 <floor+0xf0>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fc9c 	bl	80001dc <__adddf3>
 80058a4:	2200      	movs	r2, #0
 80058a6:	2300      	movs	r3, #0
 80058a8:	f7fb f8de 	bl	8000a68 <__aeabi_dcmpgt>
 80058ac:	b138      	cbz	r0, 80058be <floor+0x46>
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	da53      	bge.n	800595a <floor+0xe2>
 80058b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80058b6:	4325      	orrs	r5, r4
 80058b8:	d052      	beq.n	8005960 <floor+0xe8>
 80058ba:	4c2d      	ldr	r4, [pc, #180]	; (8005970 <floor+0xf8>)
 80058bc:	2500      	movs	r5, #0
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	e024      	b.n	800590e <floor+0x96>
 80058c4:	4f2b      	ldr	r7, [pc, #172]	; (8005974 <floor+0xfc>)
 80058c6:	4137      	asrs	r7, r6
 80058c8:	ea01 0307 	and.w	r3, r1, r7
 80058cc:	4303      	orrs	r3, r0
 80058ce:	d01e      	beq.n	800590e <floor+0x96>
 80058d0:	a325      	add	r3, pc, #148	; (adr r3, 8005968 <floor+0xf0>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fc81 	bl	80001dc <__adddf3>
 80058da:	2200      	movs	r2, #0
 80058dc:	2300      	movs	r3, #0
 80058de:	f7fb f8c3 	bl	8000a68 <__aeabi_dcmpgt>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0eb      	beq.n	80058be <floor+0x46>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	bfbe      	ittt	lt
 80058ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058ee:	4133      	asrlt	r3, r6
 80058f0:	18e4      	addlt	r4, r4, r3
 80058f2:	ea24 0407 	bic.w	r4, r4, r7
 80058f6:	2500      	movs	r5, #0
 80058f8:	e7e1      	b.n	80058be <floor+0x46>
 80058fa:	2e33      	cmp	r6, #51	; 0x33
 80058fc:	dd0b      	ble.n	8005916 <floor+0x9e>
 80058fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005902:	d104      	bne.n	800590e <floor+0x96>
 8005904:	ee10 2a10 	vmov	r2, s0
 8005908:	460b      	mov	r3, r1
 800590a:	f7fa fc67 	bl	80001dc <__adddf3>
 800590e:	ec41 0b10 	vmov	d0, r0, r1
 8005912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005916:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800591a:	f04f 37ff 	mov.w	r7, #4294967295
 800591e:	40df      	lsrs	r7, r3
 8005920:	4238      	tst	r0, r7
 8005922:	d0f4      	beq.n	800590e <floor+0x96>
 8005924:	a310      	add	r3, pc, #64	; (adr r3, 8005968 <floor+0xf0>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fc57 	bl	80001dc <__adddf3>
 800592e:	2200      	movs	r2, #0
 8005930:	2300      	movs	r3, #0
 8005932:	f7fb f899 	bl	8000a68 <__aeabi_dcmpgt>
 8005936:	2800      	cmp	r0, #0
 8005938:	d0c1      	beq.n	80058be <floor+0x46>
 800593a:	2c00      	cmp	r4, #0
 800593c:	da0a      	bge.n	8005954 <floor+0xdc>
 800593e:	2e14      	cmp	r6, #20
 8005940:	d101      	bne.n	8005946 <floor+0xce>
 8005942:	3401      	adds	r4, #1
 8005944:	e006      	b.n	8005954 <floor+0xdc>
 8005946:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800594a:	2301      	movs	r3, #1
 800594c:	40b3      	lsls	r3, r6
 800594e:	441d      	add	r5, r3
 8005950:	45a8      	cmp	r8, r5
 8005952:	d8f6      	bhi.n	8005942 <floor+0xca>
 8005954:	ea25 0507 	bic.w	r5, r5, r7
 8005958:	e7b1      	b.n	80058be <floor+0x46>
 800595a:	2500      	movs	r5, #0
 800595c:	462c      	mov	r4, r5
 800595e:	e7ae      	b.n	80058be <floor+0x46>
 8005960:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005964:	e7ab      	b.n	80058be <floor+0x46>
 8005966:	bf00      	nop
 8005968:	8800759c 	.word	0x8800759c
 800596c:	7e37e43c 	.word	0x7e37e43c
 8005970:	bff00000 	.word	0xbff00000
 8005974:	000fffff 	.word	0x000fffff

08005978 <_init>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr

08005984 <_fini>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr
